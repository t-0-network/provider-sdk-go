// Specification Copyright (c) 2020 Joint Working Group on interVASP Messaging Standards
// https://intervasp.org/
// https://intervasp.org/wp-content/uploads/2020/05/IVMS101-interVASP-data-model-standard-issue-1-FINAL.pdf

// Protocol Buffer Specification Copyright (c) 2020 CipherTrace, Inc. https://ciphertrace.com

// Licensed under MIT License

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// NOTE ON THE SPECIFICATION MAPPING
// This protocol buffers specification has applied the Protocol Buffers style guide
// https://developers.google.com/protocol-buffers/docs/style to the ISVM101
// specification to be consistent with other Protocol Buffers specifications and to
// avoid common pitfalls when generating language specific classes.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: ivms101/v1/ivms/ivms101.proto

package ivms

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Person struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Person:
	//
	//	*Person_NaturalPerson
	//	*Person_LegalPerson
	Person        isPerson_Person `protobuf_oneof:"person"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Person) Reset() {
	*x = Person{}
	mi := &file_ivms101_v1_ivms_ivms101_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Person) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person) ProtoMessage() {}

func (x *Person) ProtoReflect() protoreflect.Message {
	mi := &file_ivms101_v1_ivms_ivms101_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person.ProtoReflect.Descriptor instead.
func (*Person) Descriptor() ([]byte, []int) {
	return file_ivms101_v1_ivms_ivms101_proto_rawDescGZIP(), []int{0}
}

func (x *Person) GetPerson() isPerson_Person {
	if x != nil {
		return x.Person
	}
	return nil
}

func (x *Person) GetNaturalPerson() *NaturalPerson {
	if x != nil {
		if x, ok := x.Person.(*Person_NaturalPerson); ok {
			return x.NaturalPerson
		}
	}
	return nil
}

func (x *Person) GetLegalPerson() *LegalPerson {
	if x != nil {
		if x, ok := x.Person.(*Person_LegalPerson); ok {
			return x.LegalPerson
		}
	}
	return nil
}

type isPerson_Person interface {
	isPerson_Person()
}

type Person_NaturalPerson struct {
	// Definition: a uniquely distinguishable individual; one single person.
	NaturalPerson *NaturalPerson `protobuf:"bytes,1,opt,name=natural_person,json=naturalPerson,proto3,oneof"`
}

type Person_LegalPerson struct {
	// Definition: any entity other than a natural person that can establish a
	// permanent customer relationship with an affected entity or otherwise own
	// property. This can include companies, bodies corporate, foundations, anstalt,
	// partnerships, or associations and other relevantly similar entities.
	LegalPerson *LegalPerson `protobuf:"bytes,2,opt,name=legal_person,json=legalPerson,proto3,oneof"`
}

func (*Person_NaturalPerson) isPerson_Person() {}

func (*Person_LegalPerson) isPerson_Person() {}

// Definition: refers to a uniquely distinguishable individual; one single person
type NaturalPerson struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Definition: the distinct words used as identification for an individual.
	Name *NaturalPersonName `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Definition: the particulars of a location at which a person may be communicated with.
	GeographicAddresses []*Address `protobuf:"bytes,2,rep,name=geographic_addresses,json=geographicAddress,proto3" json:"geographic_addresses,omitempty"`
	// Definition: a distinct identifier used by governments of countries to uniquely
	// identify a natural or legal person.
	NationalIdentification *NationalIdentification `protobuf:"bytes,3,opt,name=national_identification,json=nationalIdentification,proto3" json:"national_identification,omitempty"`
	// Definition: a distinct identifier that uniquely identifies the person to the
	// institution in context.
	CustomerIdentification string `protobuf:"bytes,4,opt,name=customer_identification,json=customerIdentification,proto3" json:"customer_identification,omitempty"`
	// Definition: date and place of birth of a person.
	DateAndPlaceOfBirth *DateAndPlaceOfBirth `protobuf:"bytes,5,opt,name=date_and_place_of_birth,json=dateAndPlaceOfBirth,proto3" json:"date_and_place_of_birth,omitempty"`
	// Definition: country in which a person resides (the place of a person's home).
	// The value used for the field country must be present on the ISO-3166-1 alpha-2
	// codes or the value XX.
	CountryOfResidence string `protobuf:"bytes,6,opt,name=country_of_residence,json=countryOfResidence,proto3" json:"country_of_residence,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *NaturalPerson) Reset() {
	*x = NaturalPerson{}
	mi := &file_ivms101_v1_ivms_ivms101_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NaturalPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NaturalPerson) ProtoMessage() {}

func (x *NaturalPerson) ProtoReflect() protoreflect.Message {
	mi := &file_ivms101_v1_ivms_ivms101_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NaturalPerson.ProtoReflect.Descriptor instead.
func (*NaturalPerson) Descriptor() ([]byte, []int) {
	return file_ivms101_v1_ivms_ivms101_proto_rawDescGZIP(), []int{1}
}

func (x *NaturalPerson) GetName() *NaturalPersonName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *NaturalPerson) GetGeographicAddresses() []*Address {
	if x != nil {
		return x.GeographicAddresses
	}
	return nil
}

func (x *NaturalPerson) GetNationalIdentification() *NationalIdentification {
	if x != nil {
		return x.NationalIdentification
	}
	return nil
}

func (x *NaturalPerson) GetCustomerIdentification() string {
	if x != nil {
		return x.CustomerIdentification
	}
	return ""
}

func (x *NaturalPerson) GetDateAndPlaceOfBirth() *DateAndPlaceOfBirth {
	if x != nil {
		return x.DateAndPlaceOfBirth
	}
	return nil
}

func (x *NaturalPerson) GetCountryOfResidence() string {
	if x != nil {
		return x.CountryOfResidence
	}
	return ""
}

type NaturalPersonName struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// At least one occurrence of naturalPersonNameID must have the value ‘LEGL’
	// specified in the element naturalPersonNameIdentifierType.
	// Definition: full name separated into primary and secondary identifier.
	NameIdentifiers []*NaturalPersonNameId `protobuf:"bytes,1,rep,name=name_identifiers,json=nameIdentifier,proto3" json:"name_identifiers,omitempty"`
	// Definition: full name separated into primary and secondary identifier using
	// local characters.
	LocalNameIdentifiers []*LocalNaturalPersonNameId `protobuf:"bytes,2,rep,name=local_name_identifiers,json=localNameIdentifier,proto3" json:"local_name_identifiers,omitempty"`
	// Definition: Alternate representation of a name that corresponds to the manner
	// the name is pronounced.
	PhoneticNameIdentifiers []*LocalNaturalPersonNameId `protobuf:"bytes,3,rep,name=phonetic_name_identifiers,json=phoneticNameIdentifier,proto3" json:"phonetic_name_identifiers,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *NaturalPersonName) Reset() {
	*x = NaturalPersonName{}
	mi := &file_ivms101_v1_ivms_ivms101_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NaturalPersonName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NaturalPersonName) ProtoMessage() {}

func (x *NaturalPersonName) ProtoReflect() protoreflect.Message {
	mi := &file_ivms101_v1_ivms_ivms101_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NaturalPersonName.ProtoReflect.Descriptor instead.
func (*NaturalPersonName) Descriptor() ([]byte, []int) {
	return file_ivms101_v1_ivms_ivms101_proto_rawDescGZIP(), []int{2}
}

func (x *NaturalPersonName) GetNameIdentifiers() []*NaturalPersonNameId {
	if x != nil {
		return x.NameIdentifiers
	}
	return nil
}

func (x *NaturalPersonName) GetLocalNameIdentifiers() []*LocalNaturalPersonNameId {
	if x != nil {
		return x.LocalNameIdentifiers
	}
	return nil
}

func (x *NaturalPersonName) GetPhoneticNameIdentifiers() []*LocalNaturalPersonNameId {
	if x != nil {
		return x.PhoneticNameIdentifiers
	}
	return nil
}

type NaturalPersonNameId struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Definition: This may be the family name, the maiden name or the married name,
	// the main name, the surname, and in some cases, the entire name where the natural
	// person’s name cannot be divided into two parts, or where the sender is unable to
	// divide the natural person’s name into two parts.
	PrimaryIdentifier string `protobuf:"bytes,1,opt,name=primary_identifier,json=primaryIdentifier,proto3" json:"primary_identifier,omitempty"`
	// Definition: These may be the forenames, familiar names, given names, initials,
	// prefixes, suffixes or Roman numerals (where considered to be legally part of the
	// name) or any other secondary names.
	SecondaryIdentifier string `protobuf:"bytes,2,opt,name=secondary_identifier,json=secondaryIdentifier,proto3" json:"secondary_identifier,omitempty"`
	// Definition: The nature of the name specified.
	NameIdentifierType NaturalPersonNameTypeCode `protobuf:"varint,3,opt,name=name_identifier_type,json=nameIdentifierType,proto3,enum=ivms101.NaturalPersonNameTypeCode" json:"name_identifier_type,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *NaturalPersonNameId) Reset() {
	*x = NaturalPersonNameId{}
	mi := &file_ivms101_v1_ivms_ivms101_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NaturalPersonNameId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NaturalPersonNameId) ProtoMessage() {}

func (x *NaturalPersonNameId) ProtoReflect() protoreflect.Message {
	mi := &file_ivms101_v1_ivms_ivms101_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NaturalPersonNameId.ProtoReflect.Descriptor instead.
func (*NaturalPersonNameId) Descriptor() ([]byte, []int) {
	return file_ivms101_v1_ivms_ivms101_proto_rawDescGZIP(), []int{3}
}

func (x *NaturalPersonNameId) GetPrimaryIdentifier() string {
	if x != nil {
		return x.PrimaryIdentifier
	}
	return ""
}

func (x *NaturalPersonNameId) GetSecondaryIdentifier() string {
	if x != nil {
		return x.SecondaryIdentifier
	}
	return ""
}

func (x *NaturalPersonNameId) GetNameIdentifierType() NaturalPersonNameTypeCode {
	if x != nil {
		return x.NameIdentifierType
	}
	return NaturalPersonNameTypeCode_NATURAL_PERSON_NAME_TYPE_CODE_MISC
}

type LocalNaturalPersonNameId struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Definition: This may be the family name, the maiden name or the married name,
	// the main name, the surname, and in some cases, the entire name where the natural
	// person’s name cannot be divided into two parts, or where the sender is unable to
	// divide the natural person’s name into two parts.
	PrimaryIdentifier string `protobuf:"bytes,1,opt,name=primary_identifier,json=primaryIdentifier,proto3" json:"primary_identifier,omitempty"`
	// Definition: These may be the forenames, familiar names, given names, initials,
	// prefixes, suffixes or Roman numerals (where considered to be legally part of
	// the name) or any other secondary names.
	SecondaryIdentifier string `protobuf:"bytes,2,opt,name=secondary_identifier,json=secondaryIdentifier,proto3" json:"secondary_identifier,omitempty"`
	// Definition: The nature of the name specified.
	NameIdentifierType NaturalPersonNameTypeCode `protobuf:"varint,3,opt,name=name_identifier_type,json=nameIdentifierType,proto3,enum=ivms101.NaturalPersonNameTypeCode" json:"name_identifier_type,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *LocalNaturalPersonNameId) Reset() {
	*x = LocalNaturalPersonNameId{}
	mi := &file_ivms101_v1_ivms_ivms101_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalNaturalPersonNameId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalNaturalPersonNameId) ProtoMessage() {}

func (x *LocalNaturalPersonNameId) ProtoReflect() protoreflect.Message {
	mi := &file_ivms101_v1_ivms_ivms101_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalNaturalPersonNameId.ProtoReflect.Descriptor instead.
func (*LocalNaturalPersonNameId) Descriptor() ([]byte, []int) {
	return file_ivms101_v1_ivms_ivms101_proto_rawDescGZIP(), []int{4}
}

func (x *LocalNaturalPersonNameId) GetPrimaryIdentifier() string {
	if x != nil {
		return x.PrimaryIdentifier
	}
	return ""
}

func (x *LocalNaturalPersonNameId) GetSecondaryIdentifier() string {
	if x != nil {
		return x.SecondaryIdentifier
	}
	return ""
}

func (x *LocalNaturalPersonNameId) GetNameIdentifierType() NaturalPersonNameTypeCode {
	if x != nil {
		return x.NameIdentifierType
	}
	return NaturalPersonNameTypeCode_NATURAL_PERSON_NAME_TYPE_CODE_MISC
}

// Constraint: ValidAddress
// There must be at least one occurrence of the element addressLine or (streetName and
// buildingName and/or buildingNumber).
type Address struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Definition: Identifies the nature of the address.
	AddressType AddressTypeCode `protobuf:"varint,1,opt,name=address_type,json=addressType,proto3,enum=ivms101.AddressTypeCode" json:"address_type,omitempty"`
	// Definition: Identification of a division of a large organisation or building.
	Department string `protobuf:"bytes,2,opt,name=department,proto3" json:"department,omitempty"`
	// Definition: Identification of a sub-division of a large organisation or building.
	SubDepartment string `protobuf:"bytes,3,opt,name=sub_department,json=subDepartment,proto3" json:"sub_department,omitempty"`
	// Definition: Name of a street or thoroughfare.
	StreetName string `protobuf:"bytes,4,opt,name=street_name,json=streetName,proto3" json:"street_name,omitempty"`
	// Definition: Number that identifies the position of a building on a street.
	BuildingNumber string `protobuf:"bytes,5,opt,name=building_number,json=buildingNumber,proto3" json:"building_number,omitempty"`
	// Definition: Name of the building or house.
	BuildingName string `protobuf:"bytes,6,opt,name=building_name,json=buildingName,proto3" json:"building_name,omitempty"`
	// Definition: Floor or storey within a building.
	Floor string `protobuf:"bytes,7,opt,name=floor,proto3" json:"floor,omitempty"`
	// Definition: Numbered box in a post office, assigned to a person or organisation,
	// where letters are kept until called for.
	PostBox string `protobuf:"bytes,8,opt,name=post_box,json=postBox,proto3" json:"post_box,omitempty"`
	// Definition: Building room number.
	Room string `protobuf:"bytes,9,opt,name=room,proto3" json:"room,omitempty"`
	// Definition: Identifier consisting of a group of letters and/or numbers that is
	// added to a postal address to assist the sorting of mail.
	PostCode string `protobuf:"bytes,10,opt,name=post_code,json=postCode,proto3" json:"post_code,omitempty"`
	// Definition: Name of a built-up area, with defined boundaries and a local government.
	TownName string `protobuf:"bytes,11,opt,name=town_name,json=townName,proto3" json:"town_name,omitempty"`
	// Definition: Specific location name within the town.
	TownLocationName string `protobuf:"bytes,12,opt,name=town_location_name,json=townLocationName,proto3" json:"town_location_name,omitempty"`
	// Definition: Identifies a subdivision within a country subdivision.
	DistrictName string `protobuf:"bytes,13,opt,name=district_name,json=districtName,proto3" json:"district_name,omitempty"`
	// Definition: Identifies a subdivision of a country for example, state, region,
	// province, départment or county.
	CountrySubDivision string `protobuf:"bytes,14,opt,name=country_sub_division,json=countrySubDivision,proto3" json:"country_sub_division,omitempty"`
	// Definition: Information that locates and identifies a specific address, as
	// defined by postal services, presented in free format text.
	AddressLine []string `protobuf:"bytes,15,rep,name=address_line,json=addressLine,proto3" json:"address_line,omitempty"`
	// Constraint: The value used for the field country must be present on the
	// ISO-3166-1 alpha-2 codes or the value XX.
	Country       string `protobuf:"bytes,16,opt,name=country,proto3" json:"country,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Address) Reset() {
	*x = Address{}
	mi := &file_ivms101_v1_ivms_ivms101_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_ivms101_v1_ivms_ivms101_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_ivms101_v1_ivms_ivms101_proto_rawDescGZIP(), []int{5}
}

func (x *Address) GetAddressType() AddressTypeCode {
	if x != nil {
		return x.AddressType
	}
	return AddressTypeCode_ADDRESS_TYPE_CODE_MISC
}

func (x *Address) GetDepartment() string {
	if x != nil {
		return x.Department
	}
	return ""
}

func (x *Address) GetSubDepartment() string {
	if x != nil {
		return x.SubDepartment
	}
	return ""
}

func (x *Address) GetStreetName() string {
	if x != nil {
		return x.StreetName
	}
	return ""
}

func (x *Address) GetBuildingNumber() string {
	if x != nil {
		return x.BuildingNumber
	}
	return ""
}

func (x *Address) GetBuildingName() string {
	if x != nil {
		return x.BuildingName
	}
	return ""
}

func (x *Address) GetFloor() string {
	if x != nil {
		return x.Floor
	}
	return ""
}

func (x *Address) GetPostBox() string {
	if x != nil {
		return x.PostBox
	}
	return ""
}

func (x *Address) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *Address) GetPostCode() string {
	if x != nil {
		return x.PostCode
	}
	return ""
}

func (x *Address) GetTownName() string {
	if x != nil {
		return x.TownName
	}
	return ""
}

func (x *Address) GetTownLocationName() string {
	if x != nil {
		return x.TownLocationName
	}
	return ""
}

func (x *Address) GetDistrictName() string {
	if x != nil {
		return x.DistrictName
	}
	return ""
}

func (x *Address) GetCountrySubDivision() string {
	if x != nil {
		return x.CountrySubDivision
	}
	return ""
}

func (x *Address) GetAddressLine() []string {
	if x != nil {
		return x.AddressLine
	}
	return nil
}

func (x *Address) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

// Constraint: DateInPast
// If dateOfBirth is specified, the date specified must be a historic date (i.e. a date
// prior to the current date)
type DateAndPlaceOfBirth struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Definition: Date on which a person is born.
	// Definition: A point in time, represented as a day within the calendar year.
	// Compliant with ISO 8601.
	// Format: YYYY-MM-DD
	DateOfBirth string `protobuf:"bytes,1,opt,name=date_of_birth,json=dateOfBirth,proto3" json:"date_of_birth,omitempty"`
	// Definition: The town and/or the city and/or the suburb and/or the country
	// subdivision and/or the country where the person was born.
	PlaceOfBirth  string `protobuf:"bytes,2,opt,name=place_of_birth,json=placeOfBirth,proto3" json:"place_of_birth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DateAndPlaceOfBirth) Reset() {
	*x = DateAndPlaceOfBirth{}
	mi := &file_ivms101_v1_ivms_ivms101_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DateAndPlaceOfBirth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateAndPlaceOfBirth) ProtoMessage() {}

func (x *DateAndPlaceOfBirth) ProtoReflect() protoreflect.Message {
	mi := &file_ivms101_v1_ivms_ivms101_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateAndPlaceOfBirth.ProtoReflect.Descriptor instead.
func (*DateAndPlaceOfBirth) Descriptor() ([]byte, []int) {
	return file_ivms101_v1_ivms_ivms101_proto_rawDescGZIP(), []int{6}
}

func (x *DateAndPlaceOfBirth) GetDateOfBirth() string {
	if x != nil {
		return x.DateOfBirth
	}
	return ""
}

func (x *DateAndPlaceOfBirth) GetPlaceOfBirth() string {
	if x != nil {
		return x.PlaceOfBirth
	}
	return ""
}

// Constraint: ValidNationalIdentifierLegalPerson
// A legal person must have a value for nationalIdentifierType of either ‘RAID’ or
// ‘MISC’ or ‘LEIX’ or ‘TXID’.
// Constraint: CompleteNationalIdentifierLegalPerson
// A LegalPerson must not have a value for countryOfIssue and must have a value for the
// element RegistrationAuthority if the value for nationalIdentifierType is not ‘LEIX’
// Constraint: ValidLEI
// A LegalPerson with a nationalIdentifierType of ‘LEIX’ must have a value for the
// element nationalIdentifier that adheres to the convention as stated in datatype
// ‘LEIText’.
type NationalIdentification struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Definition: An identifier issued by an appropriate issuing authority.
	// Constraint: ValidLEI
	NationalIdentifier string `protobuf:"bytes,1,opt,name=national_identifier,json=nationalIdentifier,proto3" json:"national_identifier,omitempty"`
	// Definition: Specifies the type of identifier specified.
	NationalIdentifierType NationalIdentifierTypeCode `protobuf:"varint,2,opt,name=national_identifier_type,json=nationalIdentifierType,proto3,enum=ivms101.NationalIdentifierTypeCode" json:"national_identifier_type,omitempty"`
	// Definition: Country of the issuing authority.
	CountryOfIssue string `protobuf:"bytes,3,opt,name=country_of_issue,json=countryOfIssue,proto3" json:"country_of_issue,omitempty"`
	// Definition: A code specifying the registration authority.
	// Constraint: The value used for the applicable element must be present on the
	// GLEIF Registration Authorities List.
	RegistrationAuthority string `protobuf:"bytes,4,opt,name=registration_authority,json=registrationAuthority,proto3" json:"registration_authority,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *NationalIdentification) Reset() {
	*x = NationalIdentification{}
	mi := &file_ivms101_v1_ivms_ivms101_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NationalIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NationalIdentification) ProtoMessage() {}

func (x *NationalIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_ivms101_v1_ivms_ivms101_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NationalIdentification.ProtoReflect.Descriptor instead.
func (*NationalIdentification) Descriptor() ([]byte, []int) {
	return file_ivms101_v1_ivms_ivms101_proto_rawDescGZIP(), []int{7}
}

func (x *NationalIdentification) GetNationalIdentifier() string {
	if x != nil {
		return x.NationalIdentifier
	}
	return ""
}

func (x *NationalIdentification) GetNationalIdentifierType() NationalIdentifierTypeCode {
	if x != nil {
		return x.NationalIdentifierType
	}
	return NationalIdentifierTypeCode_NATIONAL_IDENTIFIER_TYPE_CODE_MISC
}

func (x *NationalIdentification) GetCountryOfIssue() string {
	if x != nil {
		return x.CountryOfIssue
	}
	return ""
}

func (x *NationalIdentification) GetRegistrationAuthority() string {
	if x != nil {
		return x.RegistrationAuthority
	}
	return ""
}

// Definition: refers to any entity other than a natural person that can establish a
// permanent customer relationship with an affected entity or otherwise own property.
// This can include companies, bodies corporate, foundations, anstalt, partnerships, or
// associations and other relevantly similar entities.
// Constraint: OriginatorInformationLegalPerson
// If the originator is a LegalPerson either geographicAddress (with an addressType
// value of ‘GEOG’) and/or nationalIdentification and/or customerNumber is required.
type LegalPerson struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Definition: The name of the legal person.
	// Constraint: LegalNamePresentLegalPerson
	// At least one occurrence of legalPersonNameIdentifier must have the value ‘LEGL’
	// specified in the element legalPersonNameIdentifierType.
	Name *LegalPersonName `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Definition: The address of the legal person.
	GeographicAddresses []*Address `protobuf:"bytes,2,rep,name=geographic_addresses,json=geographicAddress,proto3" json:"geographic_addresses,omitempty"`
	// Definition: The unique identification number applied by the VASP to customer.
	// NOTE The specification has a descrepency in that 5.2.9.3.3 specifies an element
	// name as "customerNumber", while the table in 5.2.9.1 calls that element
	// "customerIdentification"
	CustomerNumber string `protobuf:"bytes,3,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	// Definition: A distinct identifier used by governments of countries to uniquely
	// identify a natural or legal person.
	NationalIdentification *NationalIdentification `protobuf:"bytes,4,opt,name=national_identification,json=nationalIdentification,proto3" json:"national_identification,omitempty"`
	// Definition: The country in which the legal person is registered.
	// Constraint: The value used for the field country must be present on the
	// ISO-3166-1 alpha-2 codes or the value XX.
	CountryOfRegistration string `protobuf:"bytes,5,opt,name=country_of_registration,json=countryOfRegistration,proto3" json:"country_of_registration,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *LegalPerson) Reset() {
	*x = LegalPerson{}
	mi := &file_ivms101_v1_ivms_ivms101_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegalPerson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegalPerson) ProtoMessage() {}

func (x *LegalPerson) ProtoReflect() protoreflect.Message {
	mi := &file_ivms101_v1_ivms_ivms101_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegalPerson.ProtoReflect.Descriptor instead.
func (*LegalPerson) Descriptor() ([]byte, []int) {
	return file_ivms101_v1_ivms_ivms101_proto_rawDescGZIP(), []int{8}
}

func (x *LegalPerson) GetName() *LegalPersonName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *LegalPerson) GetGeographicAddresses() []*Address {
	if x != nil {
		return x.GeographicAddresses
	}
	return nil
}

func (x *LegalPerson) GetCustomerNumber() string {
	if x != nil {
		return x.CustomerNumber
	}
	return ""
}

func (x *LegalPerson) GetNationalIdentification() *NationalIdentification {
	if x != nil {
		return x.NationalIdentification
	}
	return nil
}

func (x *LegalPerson) GetCountryOfRegistration() string {
	if x != nil {
		return x.CountryOfRegistration
	}
	return ""
}

type LegalPersonName struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Definition: The name and type of name by which the legal person is known.
	// Constraint: LegalNamePresent
	// At least one occurrence of legalPersonNameIdentifier must have the value
	// ‘LEGL’ specified in the element legalPersonNameIdentifierType.
	NameIdentifiers []*LegalPersonNameId `protobuf:"bytes,1,rep,name=name_identifiers,json=nameIdentifier,proto3" json:"name_identifiers,omitempty"`
	// Definition: The name and type of name by which the legal person is known using
	// local characters.
	LocalNameIdentifiers []*LocalLegalPersonNameId `protobuf:"bytes,2,rep,name=local_name_identifiers,json=localNameIdentifier,proto3" json:"local_name_identifiers,omitempty"`
	// Definition: The name and type of name by which the legal person is known using
	// local characters.
	PhoneticNameIdentifiers []*LocalLegalPersonNameId `protobuf:"bytes,3,rep,name=phonetic_name_identifiers,json=phoneticNameIdentifier,proto3" json:"phonetic_name_identifiers,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *LegalPersonName) Reset() {
	*x = LegalPersonName{}
	mi := &file_ivms101_v1_ivms_ivms101_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegalPersonName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegalPersonName) ProtoMessage() {}

func (x *LegalPersonName) ProtoReflect() protoreflect.Message {
	mi := &file_ivms101_v1_ivms_ivms101_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegalPersonName.ProtoReflect.Descriptor instead.
func (*LegalPersonName) Descriptor() ([]byte, []int) {
	return file_ivms101_v1_ivms_ivms101_proto_rawDescGZIP(), []int{9}
}

func (x *LegalPersonName) GetNameIdentifiers() []*LegalPersonNameId {
	if x != nil {
		return x.NameIdentifiers
	}
	return nil
}

func (x *LegalPersonName) GetLocalNameIdentifiers() []*LocalLegalPersonNameId {
	if x != nil {
		return x.LocalNameIdentifiers
	}
	return nil
}

func (x *LegalPersonName) GetPhoneticNameIdentifiers() []*LocalLegalPersonNameId {
	if x != nil {
		return x.PhoneticNameIdentifiers
	}
	return nil
}

type LegalPersonNameId struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Definition: Name by which the legal person is known.
	LegalPersonName string `protobuf:"bytes,1,opt,name=legal_person_name,json=legalPersonName,proto3" json:"legal_person_name,omitempty"`
	// Definition: The nature of the name specified.
	LegalPersonNameIdentifierType LegalPersonNameTypeCode `protobuf:"varint,2,opt,name=legal_person_name_identifier_type,json=legalPersonNameIdentifierType,proto3,enum=ivms101.LegalPersonNameTypeCode" json:"legal_person_name_identifier_type,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *LegalPersonNameId) Reset() {
	*x = LegalPersonNameId{}
	mi := &file_ivms101_v1_ivms_ivms101_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegalPersonNameId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegalPersonNameId) ProtoMessage() {}

func (x *LegalPersonNameId) ProtoReflect() protoreflect.Message {
	mi := &file_ivms101_v1_ivms_ivms101_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegalPersonNameId.ProtoReflect.Descriptor instead.
func (*LegalPersonNameId) Descriptor() ([]byte, []int) {
	return file_ivms101_v1_ivms_ivms101_proto_rawDescGZIP(), []int{10}
}

func (x *LegalPersonNameId) GetLegalPersonName() string {
	if x != nil {
		return x.LegalPersonName
	}
	return ""
}

func (x *LegalPersonNameId) GetLegalPersonNameIdentifierType() LegalPersonNameTypeCode {
	if x != nil {
		return x.LegalPersonNameIdentifierType
	}
	return LegalPersonNameTypeCode_LEGAL_PERSON_NAME_TYPE_CODE_MISC
}

type LocalLegalPersonNameId struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Definition: Name by which the legal person is known.
	LegalPersonName string `protobuf:"bytes,1,opt,name=legal_person_name,json=legalPersonName,proto3" json:"legal_person_name,omitempty"`
	// Definition: The nature of the name specified.
	LegalPersonNameIdentifierType LegalPersonNameTypeCode `protobuf:"varint,2,opt,name=legal_person_name_identifier_type,json=legalPersonNameIdentifierType,proto3,enum=ivms101.LegalPersonNameTypeCode" json:"legal_person_name_identifier_type,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *LocalLegalPersonNameId) Reset() {
	*x = LocalLegalPersonNameId{}
	mi := &file_ivms101_v1_ivms_ivms101_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalLegalPersonNameId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalLegalPersonNameId) ProtoMessage() {}

func (x *LocalLegalPersonNameId) ProtoReflect() protoreflect.Message {
	mi := &file_ivms101_v1_ivms_ivms101_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalLegalPersonNameId.ProtoReflect.Descriptor instead.
func (*LocalLegalPersonNameId) Descriptor() ([]byte, []int) {
	return file_ivms101_v1_ivms_ivms101_proto_rawDescGZIP(), []int{11}
}

func (x *LocalLegalPersonNameId) GetLegalPersonName() string {
	if x != nil {
		return x.LegalPersonName
	}
	return ""
}

func (x *LocalLegalPersonNameId) GetLegalPersonNameIdentifierType() LegalPersonNameTypeCode {
	if x != nil {
		return x.LegalPersonNameIdentifierType
	}
	return LegalPersonNameTypeCode_LEGAL_PERSON_NAME_TYPE_CODE_MISC
}

var File_ivms101_v1_ivms_ivms101_proto protoreflect.FileDescriptor

const file_ivms101_v1_ivms_ivms101_proto_rawDesc = "" +
	"\n" +
	"\x1divms101/v1/ivms/ivms101.proto\x12\aivms101\x1a\x1aivms101/v1/ivms/enum.proto\x1a\x1bbuf/validate/validate.proto\"\x95\x01\n" +
	"\x06Person\x12?\n" +
	"\x0enatural_person\x18\x01 \x01(\v2\x16.ivms101.NaturalPersonH\x00R\rnaturalPerson\x129\n" +
	"\flegal_person\x18\x02 \x01(\v2\x14.ivms101.LegalPersonH\x00R\vlegalPersonB\x0f\n" +
	"\x06person\x12\x05\xbaH\x02\b\x01\"\xcf\x03\n" +
	"\rNaturalPerson\x126\n" +
	"\x04name\x18\x01 \x01(\v2\x1a.ivms101.NaturalPersonNameB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12A\n" +
	"\x14geographic_addresses\x18\x02 \x03(\v2\x10.ivms101.AddressR\x11geographicAddress\x12X\n" +
	"\x17national_identification\x18\x03 \x01(\v2\x1f.ivms101.NationalIdentificationR\x16nationalIdentification\x12M\n" +
	"\x17customer_identification\x18\x04 \x01(\tB\x14\xbaH\x11r\x0f\x1822\v^$|^.*\\S.*$R\x16customerIdentification\x12R\n" +
	"\x17date_and_place_of_birth\x18\x05 \x01(\v2\x1c.ivms101.DateAndPlaceOfBirthR\x13dateAndPlaceOfBirth\x12F\n" +
	"\x14country_of_residence\x18\x06 \x01(\tB\x14\xbaH\x11r\x0f2\r^$|^[A-Z]{2}$R\x12countryOfResidence\"\x9b\x02\n" +
	"\x11NaturalPersonName\x12P\n" +
	"\x10name_identifiers\x18\x01 \x03(\v2\x1c.ivms101.NaturalPersonNameIdB\b\xbaH\x05\x92\x01\x02\b\x01R\x0enameIdentifier\x12V\n" +
	"\x16local_name_identifiers\x18\x02 \x03(\v2!.ivms101.LocalNaturalPersonNameIdR\x13localNameIdentifier\x12\\\n" +
	"\x19phonetic_name_identifiers\x18\x03 \x03(\v2!.ivms101.LocalNaturalPersonNameIdR\x16phoneticNameIdentifier\"\xfe\x01\n" +
	"\x13NaturalPersonNameId\x12@\n" +
	"\x12primary_identifier\x18\x01 \x01(\tB\x11\xbaH\x0er\f\x10\x01\x18d2\x06.*\\S.*R\x11primaryIdentifier\x12G\n" +
	"\x14secondary_identifier\x18\x02 \x01(\tB\x14\xbaH\x11r\x0f\x18d2\v^$|^.*\\S.*$R\x13secondaryIdentifier\x12\\\n" +
	"\x14name_identifier_type\x18\x03 \x01(\x0e2\".ivms101.NaturalPersonNameTypeCodeB\x06\xbaH\x03\xc8\x01\x01R\x12nameIdentifierType\"\x83\x02\n" +
	"\x18LocalNaturalPersonNameId\x12@\n" +
	"\x12primary_identifier\x18\x01 \x01(\tB\x11\xbaH\x0er\f\x10\x01\x18d2\x06.*\\S.*R\x11primaryIdentifier\x12G\n" +
	"\x14secondary_identifier\x18\x02 \x01(\tB\x14\xbaH\x11r\x0f\x18d2\v^$|^.*\\S.*$R\x13secondaryIdentifier\x12\\\n" +
	"\x14name_identifier_type\x18\x03 \x01(\x0e2\".ivms101.NaturalPersonNameTypeCodeB\x06\xbaH\x03\xc8\x01\x01R\x12nameIdentifierType\"\x93\a\n" +
	"\aAddress\x12C\n" +
	"\faddress_type\x18\x01 \x01(\x0e2\x18.ivms101.AddressTypeCodeB\x06\xbaH\x03\xc8\x01\x01R\vaddressType\x124\n" +
	"\n" +
	"department\x18\x02 \x01(\tB\x14\xbaH\x11r\x0f\x1822\v^$|^.*\\S.*$R\n" +
	"department\x12;\n" +
	"\x0esub_department\x18\x03 \x01(\tB\x14\xbaH\x11r\x0f\x18F2\v^$|^.*\\S.*$R\rsubDepartment\x125\n" +
	"\vstreet_name\x18\x04 \x01(\tB\x14\xbaH\x11r\x0f\x18F2\v^$|^.*\\S.*$R\n" +
	"streetName\x12=\n" +
	"\x0fbuilding_number\x18\x05 \x01(\tB\x14\xbaH\x11r\x0f\x18\x102\v^$|^.*\\S.*$R\x0ebuildingNumber\x129\n" +
	"\rbuilding_name\x18\x06 \x01(\tB\x14\xbaH\x11r\x0f\x18#2\v^$|^.*\\S.*$R\fbuildingName\x12*\n" +
	"\x05floor\x18\a \x01(\tB\x14\xbaH\x11r\x0f\x18F2\v^$|^.*\\S.*$R\x05floor\x12/\n" +
	"\bpost_box\x18\b \x01(\tB\x14\xbaH\x11r\x0f\x18\x102\v^$|^.*\\S.*$R\apostBox\x12(\n" +
	"\x04room\x18\t \x01(\tB\x14\xbaH\x11r\x0f\x18F2\v^$|^.*\\S.*$R\x04room\x121\n" +
	"\tpost_code\x18\n" +
	" \x01(\tB\x14\xbaH\x11r\x0f\x18\x102\v^$|^.*\\S.*$R\bpostCode\x121\n" +
	"\ttown_name\x18\v \x01(\tB\x14\xbaH\x11r\x0f\x18#2\v^$|^.*\\S.*$R\btownName\x12B\n" +
	"\x12town_location_name\x18\f \x01(\tB\x14\xbaH\x11r\x0f\x18#2\v^$|^.*\\S.*$R\x10townLocationName\x129\n" +
	"\rdistrict_name\x18\r \x01(\tB\x14\xbaH\x11r\x0f\x18#2\v^$|^.*\\S.*$R\fdistrictName\x12F\n" +
	"\x14country_sub_division\x18\x0e \x01(\tB\x14\xbaH\x11r\x0f\x18#2\v^$|^.*\\S.*$R\x12countrySubDivision\x12>\n" +
	"\faddress_line\x18\x0f \x03(\tB\x1b\xbaH\x18\x92\x01\x15\x10\a\"\x11r\x0f\x18F2\v^$|^.*\\S.*$R\vaddressLine\x12+\n" +
	"\acountry\x18\x10 \x01(\tB\x11\xbaH\x0er\f2\n" +
	"^[A-Z]{2}$R\acountry\"\x9d\x01\n" +
	"\x13DateAndPlaceOfBirth\x12M\n" +
	"\rdate_of_birth\x18\x01 \x01(\tB)\xbaH&r$2\"^([0-9]{4})-([0-9]{2})-([0-9]{2})$R\vdateOfBirth\x127\n" +
	"\x0eplace_of_birth\x18\x02 \x01(\tB\x11\xbaH\x0er\f\x10\x01\x18F2\x06.*\\S.*R\fplaceOfBirth\"\xce\x02\n" +
	"\x16NationalIdentification\x12B\n" +
	"\x13national_identifier\x18\x01 \x01(\tB\x11\xbaH\x0er\f\x10\x01\x18#2\x06.*\\S.*R\x12nationalIdentifier\x12e\n" +
	"\x18national_identifier_type\x18\x02 \x01(\x0e2#.ivms101.NationalIdentifierTypeCodeB\x06\xbaH\x03\xc8\x01\x01R\x16nationalIdentifierType\x12>\n" +
	"\x10country_of_issue\x18\x03 \x01(\tB\x14\xbaH\x11r\x0f2\r^$|^[A-Z]{2}$R\x0ecountryOfIssue\x12I\n" +
	"\x16registration_authority\x18\x04 \x01(\tB\x12\xbaH\x0fr\r2\v^$|^.*\\S.*$R\x15registrationAuthority\"\xed\x02\n" +
	"\vLegalPerson\x124\n" +
	"\x04name\x18\x01 \x01(\v2\x18.ivms101.LegalPersonNameB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12A\n" +
	"\x14geographic_addresses\x18\x02 \x03(\v2\x10.ivms101.AddressR\x11geographicAddress\x12=\n" +
	"\x0fcustomer_number\x18\x03 \x01(\tB\x14\xbaH\x11r\x0f\x1822\v^$|^.*\\S.*$R\x0ecustomerNumber\x12X\n" +
	"\x17national_identification\x18\x04 \x01(\v2\x1f.ivms101.NationalIdentificationR\x16nationalIdentification\x12L\n" +
	"\x17country_of_registration\x18\x05 \x01(\tB\x14\xbaH\x11r\x0f2\r^$|^[A-Z]{2}$R\x15countryOfRegistration\"\x93\x02\n" +
	"\x0fLegalPersonName\x12N\n" +
	"\x10name_identifiers\x18\x01 \x03(\v2\x1a.ivms101.LegalPersonNameIdB\b\xbaH\x05\x92\x01\x02\b\x01R\x0enameIdentifier\x12T\n" +
	"\x16local_name_identifiers\x18\x02 \x03(\v2\x1f.ivms101.LocalLegalPersonNameIdR\x13localNameIdentifier\x12Z\n" +
	"\x19phonetic_name_identifiers\x18\x03 \x03(\v2\x1f.ivms101.LocalLegalPersonNameIdR\x16phoneticNameIdentifier\"\xc6\x01\n" +
	"\x11LegalPersonNameId\x12=\n" +
	"\x11legal_person_name\x18\x01 \x01(\tB\x11\xbaH\x0er\f\x10\x01\x18d2\x06.*\\S.*R\x0flegalPersonName\x12r\n" +
	"!legal_person_name_identifier_type\x18\x02 \x01(\x0e2 .ivms101.LegalPersonNameTypeCodeB\x06\xbaH\x03\xc8\x01\x01R\x1dlegalPersonNameIdentifierType\"\xcb\x01\n" +
	"\x16LocalLegalPersonNameId\x12=\n" +
	"\x11legal_person_name\x18\x01 \x01(\tB\x11\xbaH\x0er\f\x10\x01\x18d2\x06.*\\S.*R\x0flegalPersonName\x12r\n" +
	"!legal_person_name_identifier_type\x18\x02 \x01(\x0e2 .ivms101.LegalPersonNameTypeCodeB\x06\xbaH\x03\xc8\x01\x01R\x1dlegalPersonNameIdentifierTypeB\x93\x01\n" +
	"\vcom.ivms101B\fIvms101ProtoP\x01Z:github.com/t-0-network/provider-sdk-go/api/ivms101/v1/ivms\xa2\x02\x03IXX\xaa\x02\aIvms101\xca\x02\aIvms101\xe2\x02\x13Ivms101\\GPBMetadata\xea\x02\aIvms101b\x06proto3"

var (
	file_ivms101_v1_ivms_ivms101_proto_rawDescOnce sync.Once
	file_ivms101_v1_ivms_ivms101_proto_rawDescData []byte
)

func file_ivms101_v1_ivms_ivms101_proto_rawDescGZIP() []byte {
	file_ivms101_v1_ivms_ivms101_proto_rawDescOnce.Do(func() {
		file_ivms101_v1_ivms_ivms101_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ivms101_v1_ivms_ivms101_proto_rawDesc), len(file_ivms101_v1_ivms_ivms101_proto_rawDesc)))
	})
	return file_ivms101_v1_ivms_ivms101_proto_rawDescData
}

var file_ivms101_v1_ivms_ivms101_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_ivms101_v1_ivms_ivms101_proto_goTypes = []any{
	(*Person)(nil),                   // 0: ivms101.Person
	(*NaturalPerson)(nil),            // 1: ivms101.NaturalPerson
	(*NaturalPersonName)(nil),        // 2: ivms101.NaturalPersonName
	(*NaturalPersonNameId)(nil),      // 3: ivms101.NaturalPersonNameId
	(*LocalNaturalPersonNameId)(nil), // 4: ivms101.LocalNaturalPersonNameId
	(*Address)(nil),                  // 5: ivms101.Address
	(*DateAndPlaceOfBirth)(nil),      // 6: ivms101.DateAndPlaceOfBirth
	(*NationalIdentification)(nil),   // 7: ivms101.NationalIdentification
	(*LegalPerson)(nil),              // 8: ivms101.LegalPerson
	(*LegalPersonName)(nil),          // 9: ivms101.LegalPersonName
	(*LegalPersonNameId)(nil),        // 10: ivms101.LegalPersonNameId
	(*LocalLegalPersonNameId)(nil),   // 11: ivms101.LocalLegalPersonNameId
	(NaturalPersonNameTypeCode)(0),   // 12: ivms101.NaturalPersonNameTypeCode
	(AddressTypeCode)(0),             // 13: ivms101.AddressTypeCode
	(NationalIdentifierTypeCode)(0),  // 14: ivms101.NationalIdentifierTypeCode
	(LegalPersonNameTypeCode)(0),     // 15: ivms101.LegalPersonNameTypeCode
}
var file_ivms101_v1_ivms_ivms101_proto_depIdxs = []int32{
	1,  // 0: ivms101.Person.natural_person:type_name -> ivms101.NaturalPerson
	8,  // 1: ivms101.Person.legal_person:type_name -> ivms101.LegalPerson
	2,  // 2: ivms101.NaturalPerson.name:type_name -> ivms101.NaturalPersonName
	5,  // 3: ivms101.NaturalPerson.geographic_addresses:type_name -> ivms101.Address
	7,  // 4: ivms101.NaturalPerson.national_identification:type_name -> ivms101.NationalIdentification
	6,  // 5: ivms101.NaturalPerson.date_and_place_of_birth:type_name -> ivms101.DateAndPlaceOfBirth
	3,  // 6: ivms101.NaturalPersonName.name_identifiers:type_name -> ivms101.NaturalPersonNameId
	4,  // 7: ivms101.NaturalPersonName.local_name_identifiers:type_name -> ivms101.LocalNaturalPersonNameId
	4,  // 8: ivms101.NaturalPersonName.phonetic_name_identifiers:type_name -> ivms101.LocalNaturalPersonNameId
	12, // 9: ivms101.NaturalPersonNameId.name_identifier_type:type_name -> ivms101.NaturalPersonNameTypeCode
	12, // 10: ivms101.LocalNaturalPersonNameId.name_identifier_type:type_name -> ivms101.NaturalPersonNameTypeCode
	13, // 11: ivms101.Address.address_type:type_name -> ivms101.AddressTypeCode
	14, // 12: ivms101.NationalIdentification.national_identifier_type:type_name -> ivms101.NationalIdentifierTypeCode
	9,  // 13: ivms101.LegalPerson.name:type_name -> ivms101.LegalPersonName
	5,  // 14: ivms101.LegalPerson.geographic_addresses:type_name -> ivms101.Address
	7,  // 15: ivms101.LegalPerson.national_identification:type_name -> ivms101.NationalIdentification
	10, // 16: ivms101.LegalPersonName.name_identifiers:type_name -> ivms101.LegalPersonNameId
	11, // 17: ivms101.LegalPersonName.local_name_identifiers:type_name -> ivms101.LocalLegalPersonNameId
	11, // 18: ivms101.LegalPersonName.phonetic_name_identifiers:type_name -> ivms101.LocalLegalPersonNameId
	15, // 19: ivms101.LegalPersonNameId.legal_person_name_identifier_type:type_name -> ivms101.LegalPersonNameTypeCode
	15, // 20: ivms101.LocalLegalPersonNameId.legal_person_name_identifier_type:type_name -> ivms101.LegalPersonNameTypeCode
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_ivms101_v1_ivms_ivms101_proto_init() }
func file_ivms101_v1_ivms_ivms101_proto_init() {
	if File_ivms101_v1_ivms_ivms101_proto != nil {
		return
	}
	file_ivms101_v1_ivms_enum_proto_init()
	file_ivms101_v1_ivms_ivms101_proto_msgTypes[0].OneofWrappers = []any{
		(*Person_NaturalPerson)(nil),
		(*Person_LegalPerson)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ivms101_v1_ivms_ivms101_proto_rawDesc), len(file_ivms101_v1_ivms_ivms101_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ivms101_v1_ivms_ivms101_proto_goTypes,
		DependencyIndexes: file_ivms101_v1_ivms_ivms101_proto_depIdxs,
		MessageInfos:      file_ivms101_v1_ivms_ivms101_proto_msgTypes,
	}.Build()
	File_ivms101_v1_ivms_ivms101_proto = out.File
	file_ivms101_v1_ivms_ivms101_proto_goTypes = nil
	file_ivms101_v1_ivms_ivms101_proto_depIdxs = nil
}
