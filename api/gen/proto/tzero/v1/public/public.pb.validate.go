// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tzero/v1/public/public.proto

package public

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetPaymentQuoteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentQuoteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentQuoteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentQuoteRequestMultiError, or nil if none found.
func (m *GetPaymentQuoteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentQuoteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPaymentQuoteRequestMultiError(errors)
	}

	return nil
}

// GetPaymentQuoteRequestMultiError is an error wrapping multiple validation
// errors returned by GetPaymentQuoteRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPaymentQuoteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentQuoteRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentQuoteRequestMultiError) AllErrors() []error { return m }

// GetPaymentQuoteRequestValidationError is the validation error returned by
// GetPaymentQuoteRequest.Validate if the designated constraints aren't met.
type GetPaymentQuoteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentQuoteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentQuoteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentQuoteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentQuoteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentQuoteRequestValidationError) ErrorName() string {
	return "GetPaymentQuoteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentQuoteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentQuoteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentQuoteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentQuoteRequestValidationError{}

// Validate checks the field values on GetPaymentQuoteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentQuoteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentQuoteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentQuoteResponseMultiError, or nil if none found.
func (m *GetPaymentQuoteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentQuoteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPaymentQuoteResponseMultiError(errors)
	}

	return nil
}

// GetPaymentQuoteResponseMultiError is an error wrapping multiple validation
// errors returned by GetPaymentQuoteResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPaymentQuoteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentQuoteResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentQuoteResponseMultiError) AllErrors() []error { return m }

// GetPaymentQuoteResponseValidationError is the validation error returned by
// GetPaymentQuoteResponse.Validate if the designated constraints aren't met.
type GetPaymentQuoteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentQuoteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentQuoteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentQuoteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentQuoteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentQuoteResponseValidationError) ErrorName() string {
	return "GetPaymentQuoteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentQuoteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentQuoteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentQuoteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentQuoteResponseValidationError{}

// Validate checks the field values on CreatePaymentIntentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentIntentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentIntentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentIntentRequestMultiError, or nil if none found.
func (m *CreatePaymentIntentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentIntentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreatePaymentIntentRequestMultiError(errors)
	}

	return nil
}

// CreatePaymentIntentRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePaymentIntentRequest.ValidateAll() if
// the designated constraints aren't met.
type CreatePaymentIntentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentIntentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentIntentRequestMultiError) AllErrors() []error { return m }

// CreatePaymentIntentRequestValidationError is the validation error returned
// by CreatePaymentIntentRequest.Validate if the designated constraints aren't met.
type CreatePaymentIntentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentIntentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentIntentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentIntentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentIntentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentIntentRequestValidationError) ErrorName() string {
	return "CreatePaymentIntentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentIntentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentIntentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentIntentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentIntentRequestValidationError{}

// Validate checks the field values on CreatePaymentIntentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentIntentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentIntentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentIntentResponseMultiError, or nil if none found.
func (m *CreatePaymentIntentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentIntentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreatePaymentIntentResponseMultiError(errors)
	}

	return nil
}

// CreatePaymentIntentResponseMultiError is an error wrapping multiple
// validation errors returned by CreatePaymentIntentResponse.ValidateAll() if
// the designated constraints aren't met.
type CreatePaymentIntentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentIntentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentIntentResponseMultiError) AllErrors() []error { return m }

// CreatePaymentIntentResponseValidationError is the validation error returned
// by CreatePaymentIntentResponse.Validate if the designated constraints
// aren't met.
type CreatePaymentIntentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentIntentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentIntentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentIntentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentIntentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentIntentResponseValidationError) ErrorName() string {
	return "CreatePaymentIntentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentIntentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentIntentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentIntentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentIntentResponseValidationError{}

// Validate checks the field values on GetPayInDetailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPayInDetailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPayInDetailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPayInDetailsRequestMultiError, or nil if none found.
func (m *GetPayInDetailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPayInDetailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentId

	if len(errors) > 0 {
		return GetPayInDetailsRequestMultiError(errors)
	}

	return nil
}

// GetPayInDetailsRequestMultiError is an error wrapping multiple validation
// errors returned by GetPayInDetailsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPayInDetailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPayInDetailsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPayInDetailsRequestMultiError) AllErrors() []error { return m }

// GetPayInDetailsRequestValidationError is the validation error returned by
// GetPayInDetailsRequest.Validate if the designated constraints aren't met.
type GetPayInDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPayInDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPayInDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPayInDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPayInDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPayInDetailsRequestValidationError) ErrorName() string {
	return "GetPayInDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPayInDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPayInDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPayInDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPayInDetailsRequestValidationError{}

// Validate checks the field values on GetPayInDetailsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPayInDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPayInDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPayInDetailsResponseMultiError, or nil if none found.
func (m *GetPayInDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPayInDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPayInDetailsResponseMultiError(errors)
	}

	return nil
}

// GetPayInDetailsResponseMultiError is an error wrapping multiple validation
// errors returned by GetPayInDetailsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPayInDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPayInDetailsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPayInDetailsResponseMultiError) AllErrors() []error { return m }

// GetPayInDetailsResponseValidationError is the validation error returned by
// GetPayInDetailsResponse.Validate if the designated constraints aren't met.
type GetPayInDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPayInDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPayInDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPayInDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPayInDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPayInDetailsResponseValidationError) ErrorName() string {
	return "GetPayInDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPayInDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPayInDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPayInDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPayInDetailsResponseValidationError{}

// Validate checks the field values on GetPaymentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentsRequestMultiError, or nil if none found.
func (m *GetPaymentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPaymentsRequestMultiError(errors)
	}

	return nil
}

// GetPaymentsRequestMultiError is an error wrapping multiple validation errors
// returned by GetPaymentsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPaymentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentsRequestMultiError) AllErrors() []error { return m }

// GetPaymentsRequestValidationError is the validation error returned by
// GetPaymentsRequest.Validate if the designated constraints aren't met.
type GetPaymentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentsRequestValidationError) ErrorName() string {
	return "GetPaymentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentsRequestValidationError{}

// Validate checks the field values on GetPaymentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentsResponseMultiError, or nil if none found.
func (m *GetPaymentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPaymentsResponseMultiError(errors)
	}

	return nil
}

// GetPaymentsResponseMultiError is an error wrapping multiple validation
// errors returned by GetPaymentsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPaymentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentsResponseMultiError) AllErrors() []error { return m }

// GetPaymentsResponseValidationError is the validation error returned by
// GetPaymentsResponse.Validate if the designated constraints aren't met.
type GetPaymentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentsResponseValidationError) ErrorName() string {
	return "GetPaymentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentsResponseValidationError{}

// Validate checks the field values on GetCurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentUserRequestMultiError, or nil if none found.
func (m *GetCurrentUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCurrentUserRequestMultiError(errors)
	}

	return nil
}

// GetCurrentUserRequestMultiError is an error wrapping multiple validation
// errors returned by GetCurrentUserRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentUserRequestMultiError) AllErrors() []error { return m }

// GetCurrentUserRequestValidationError is the validation error returned by
// GetCurrentUserRequest.Validate if the designated constraints aren't met.
type GetCurrentUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentUserRequestValidationError) ErrorName() string {
	return "GetCurrentUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentUserRequestValidationError{}

// Validate checks the field values on GetCurrentUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentUserResponseMultiError, or nil if none found.
func (m *GetCurrentUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	switch v := m.KycStatus.(type) {
	case *GetCurrentUserResponse_Required:
		if v == nil {
			err := GetCurrentUserResponseValidationError{
				field:  "KycStatus",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRequired()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCurrentUserResponseValidationError{
						field:  "Required",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCurrentUserResponseValidationError{
						field:  "Required",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRequired()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCurrentUserResponseValidationError{
					field:  "Required",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetCurrentUserResponse_Pending:
		if v == nil {
			err := GetCurrentUserResponseValidationError{
				field:  "KycStatus",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPending()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCurrentUserResponseValidationError{
						field:  "Pending",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCurrentUserResponseValidationError{
						field:  "Pending",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPending()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCurrentUserResponseValidationError{
					field:  "Pending",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetCurrentUserResponse_Done:
		if v == nil {
			err := GetCurrentUserResponseValidationError{
				field:  "KycStatus",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDone()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCurrentUserResponseValidationError{
						field:  "Done",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCurrentUserResponseValidationError{
						field:  "Done",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDone()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCurrentUserResponseValidationError{
					field:  "Done",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetCurrentUserResponseMultiError(errors)
	}

	return nil
}

// GetCurrentUserResponseMultiError is an error wrapping multiple validation
// errors returned by GetCurrentUserResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentUserResponseMultiError) AllErrors() []error { return m }

// GetCurrentUserResponseValidationError is the validation error returned by
// GetCurrentUserResponse.Validate if the designated constraints aren't met.
type GetCurrentUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentUserResponseValidationError) ErrorName() string {
	return "GetCurrentUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentUserResponseValidationError{}

// Validate checks the field values on GetCurrentUserResponse_KycStatusDone
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetCurrentUserResponse_KycStatusDone) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentUserResponse_KycStatusDone
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetCurrentUserResponse_KycStatusDoneMultiError, or nil if none found.
func (m *GetCurrentUserResponse_KycStatusDone) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentUserResponse_KycStatusDone) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCurrentUserResponse_KycStatusDoneMultiError(errors)
	}

	return nil
}

// GetCurrentUserResponse_KycStatusDoneMultiError is an error wrapping multiple
// validation errors returned by
// GetCurrentUserResponse_KycStatusDone.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentUserResponse_KycStatusDoneMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentUserResponse_KycStatusDoneMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentUserResponse_KycStatusDoneMultiError) AllErrors() []error { return m }

// GetCurrentUserResponse_KycStatusDoneValidationError is the validation error
// returned by GetCurrentUserResponse_KycStatusDone.Validate if the designated
// constraints aren't met.
type GetCurrentUserResponse_KycStatusDoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentUserResponse_KycStatusDoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentUserResponse_KycStatusDoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentUserResponse_KycStatusDoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentUserResponse_KycStatusDoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentUserResponse_KycStatusDoneValidationError) ErrorName() string {
	return "GetCurrentUserResponse_KycStatusDoneValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentUserResponse_KycStatusDoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentUserResponse_KycStatusDone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentUserResponse_KycStatusDoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentUserResponse_KycStatusDoneValidationError{}

// Validate checks the field values on GetCurrentUserResponse_KycStatusRequired
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetCurrentUserResponse_KycStatusRequired) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetCurrentUserResponse_KycStatusRequired with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetCurrentUserResponse_KycStatusRequiredMultiError, or nil if none found.
func (m *GetCurrentUserResponse_KycStatusRequired) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentUserResponse_KycStatusRequired) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	// no validation rules for Retry

	if len(errors) > 0 {
		return GetCurrentUserResponse_KycStatusRequiredMultiError(errors)
	}

	return nil
}

// GetCurrentUserResponse_KycStatusRequiredMultiError is an error wrapping
// multiple validation errors returned by
// GetCurrentUserResponse_KycStatusRequired.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentUserResponse_KycStatusRequiredMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentUserResponse_KycStatusRequiredMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentUserResponse_KycStatusRequiredMultiError) AllErrors() []error { return m }

// GetCurrentUserResponse_KycStatusRequiredValidationError is the validation
// error returned by GetCurrentUserResponse_KycStatusRequired.Validate if the
// designated constraints aren't met.
type GetCurrentUserResponse_KycStatusRequiredValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentUserResponse_KycStatusRequiredValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentUserResponse_KycStatusRequiredValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentUserResponse_KycStatusRequiredValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentUserResponse_KycStatusRequiredValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentUserResponse_KycStatusRequiredValidationError) ErrorName() string {
	return "GetCurrentUserResponse_KycStatusRequiredValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentUserResponse_KycStatusRequiredValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentUserResponse_KycStatusRequired.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentUserResponse_KycStatusRequiredValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentUserResponse_KycStatusRequiredValidationError{}

// Validate checks the field values on GetCurrentUserResponse_KycStatusPending
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetCurrentUserResponse_KycStatusPending) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetCurrentUserResponse_KycStatusPending with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetCurrentUserResponse_KycStatusPendingMultiError, or nil if none found.
func (m *GetCurrentUserResponse_KycStatusPending) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentUserResponse_KycStatusPending) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCurrentUserResponse_KycStatusPendingMultiError(errors)
	}

	return nil
}

// GetCurrentUserResponse_KycStatusPendingMultiError is an error wrapping
// multiple validation errors returned by
// GetCurrentUserResponse_KycStatusPending.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentUserResponse_KycStatusPendingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentUserResponse_KycStatusPendingMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentUserResponse_KycStatusPendingMultiError) AllErrors() []error { return m }

// GetCurrentUserResponse_KycStatusPendingValidationError is the validation
// error returned by GetCurrentUserResponse_KycStatusPending.Validate if the
// designated constraints aren't met.
type GetCurrentUserResponse_KycStatusPendingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentUserResponse_KycStatusPendingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentUserResponse_KycStatusPendingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentUserResponse_KycStatusPendingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentUserResponse_KycStatusPendingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentUserResponse_KycStatusPendingValidationError) ErrorName() string {
	return "GetCurrentUserResponse_KycStatusPendingValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentUserResponse_KycStatusPendingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentUserResponse_KycStatusPending.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentUserResponse_KycStatusPendingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentUserResponse_KycStatusPendingValidationError{}
