// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tzero/v1/payment_intent/recipient/recipient.proto

package recipientconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	recipient "github.com/t-0-network/provider-sdk-go/api/gen/proto/tzero/v1/payment_intent/recipient"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NetworkServiceName is the fully-qualified name of the NetworkService service.
	NetworkServiceName = "tzero.v1.payment_intent.recipient.NetworkService"
	// RecipientServiceName is the fully-qualified name of the RecipientService service.
	RecipientServiceName = "tzero.v1.payment_intent.recipient.RecipientService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NetworkServiceCreatePaymentIntentProcedure is the fully-qualified name of the NetworkService's
	// CreatePaymentIntent RPC.
	NetworkServiceCreatePaymentIntentProcedure = "/tzero.v1.payment_intent.recipient.NetworkService/CreatePaymentIntent"
	// RecipientServiceConfirmPaymentProcedure is the fully-qualified name of the RecipientService's
	// ConfirmPayment RPC.
	RecipientServiceConfirmPaymentProcedure = "/tzero.v1.payment_intent.recipient.RecipientService/ConfirmPayment"
	// RecipientServiceRejectPaymentIntentProcedure is the fully-qualified name of the
	// RecipientService's RejectPaymentIntent RPC.
	RecipientServiceRejectPaymentIntentProcedure = "/tzero.v1.payment_intent.recipient.RecipientService/RejectPaymentIntent"
)

// NetworkServiceClient is a client for the tzero.v1.payment_intent.recipient.NetworkService
// service.
type NetworkServiceClient interface {
	CreatePaymentIntent(context.Context, *connect.Request[recipient.CreatePaymentIntentRequest]) (*connect.Response[recipient.CreatePaymentIntentResponse], error)
}

// NewNetworkServiceClient constructs a client for the
// tzero.v1.payment_intent.recipient.NetworkService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNetworkServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NetworkServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	networkServiceMethods := recipient.File_tzero_v1_payment_intent_recipient_recipient_proto.Services().ByName("NetworkService").Methods()
	return &networkServiceClient{
		createPaymentIntent: connect.NewClient[recipient.CreatePaymentIntentRequest, recipient.CreatePaymentIntentResponse](
			httpClient,
			baseURL+NetworkServiceCreatePaymentIntentProcedure,
			connect.WithSchema(networkServiceMethods.ByName("CreatePaymentIntent")),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
	}
}

// networkServiceClient implements NetworkServiceClient.
type networkServiceClient struct {
	createPaymentIntent *connect.Client[recipient.CreatePaymentIntentRequest, recipient.CreatePaymentIntentResponse]
}

// CreatePaymentIntent calls tzero.v1.payment_intent.recipient.NetworkService.CreatePaymentIntent.
func (c *networkServiceClient) CreatePaymentIntent(ctx context.Context, req *connect.Request[recipient.CreatePaymentIntentRequest]) (*connect.Response[recipient.CreatePaymentIntentResponse], error) {
	return c.createPaymentIntent.CallUnary(ctx, req)
}

// NetworkServiceHandler is an implementation of the
// tzero.v1.payment_intent.recipient.NetworkService service.
type NetworkServiceHandler interface {
	CreatePaymentIntent(context.Context, *connect.Request[recipient.CreatePaymentIntentRequest]) (*connect.Response[recipient.CreatePaymentIntentResponse], error)
}

// NewNetworkServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNetworkServiceHandler(svc NetworkServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	networkServiceMethods := recipient.File_tzero_v1_payment_intent_recipient_recipient_proto.Services().ByName("NetworkService").Methods()
	networkServiceCreatePaymentIntentHandler := connect.NewUnaryHandler(
		NetworkServiceCreatePaymentIntentProcedure,
		svc.CreatePaymentIntent,
		connect.WithSchema(networkServiceMethods.ByName("CreatePaymentIntent")),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	return "/tzero.v1.payment_intent.recipient.NetworkService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NetworkServiceCreatePaymentIntentProcedure:
			networkServiceCreatePaymentIntentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNetworkServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNetworkServiceHandler struct{}

func (UnimplementedNetworkServiceHandler) CreatePaymentIntent(context.Context, *connect.Request[recipient.CreatePaymentIntentRequest]) (*connect.Response[recipient.CreatePaymentIntentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tzero.v1.payment_intent.recipient.NetworkService.CreatePaymentIntent is not implemented"))
}

// RecipientServiceClient is a client for the tzero.v1.payment_intent.recipient.RecipientService
// service.
type RecipientServiceClient interface {
	// *
	// notifies recipient about successful payment
	ConfirmPayment(context.Context, *connect.Request[recipient.ConfirmPaymentRequest]) (*connect.Response[recipient.ConfirmPaymentIntentResponse], error)
	// *
	// notifies recipient about failed payment
	RejectPaymentIntent(context.Context, *connect.Request[recipient.RejectPaymentIntentRequest]) (*connect.Response[recipient.RejectPaymentIntentResponse], error)
}

// NewRecipientServiceClient constructs a client for the
// tzero.v1.payment_intent.recipient.RecipientService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRecipientServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RecipientServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	recipientServiceMethods := recipient.File_tzero_v1_payment_intent_recipient_recipient_proto.Services().ByName("RecipientService").Methods()
	return &recipientServiceClient{
		confirmPayment: connect.NewClient[recipient.ConfirmPaymentRequest, recipient.ConfirmPaymentIntentResponse](
			httpClient,
			baseURL+RecipientServiceConfirmPaymentProcedure,
			connect.WithSchema(recipientServiceMethods.ByName("ConfirmPayment")),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		rejectPaymentIntent: connect.NewClient[recipient.RejectPaymentIntentRequest, recipient.RejectPaymentIntentResponse](
			httpClient,
			baseURL+RecipientServiceRejectPaymentIntentProcedure,
			connect.WithSchema(recipientServiceMethods.ByName("RejectPaymentIntent")),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
	}
}

// recipientServiceClient implements RecipientServiceClient.
type recipientServiceClient struct {
	confirmPayment      *connect.Client[recipient.ConfirmPaymentRequest, recipient.ConfirmPaymentIntentResponse]
	rejectPaymentIntent *connect.Client[recipient.RejectPaymentIntentRequest, recipient.RejectPaymentIntentResponse]
}

// ConfirmPayment calls tzero.v1.payment_intent.recipient.RecipientService.ConfirmPayment.
func (c *recipientServiceClient) ConfirmPayment(ctx context.Context, req *connect.Request[recipient.ConfirmPaymentRequest]) (*connect.Response[recipient.ConfirmPaymentIntentResponse], error) {
	return c.confirmPayment.CallUnary(ctx, req)
}

// RejectPaymentIntent calls tzero.v1.payment_intent.recipient.RecipientService.RejectPaymentIntent.
func (c *recipientServiceClient) RejectPaymentIntent(ctx context.Context, req *connect.Request[recipient.RejectPaymentIntentRequest]) (*connect.Response[recipient.RejectPaymentIntentResponse], error) {
	return c.rejectPaymentIntent.CallUnary(ctx, req)
}

// RecipientServiceHandler is an implementation of the
// tzero.v1.payment_intent.recipient.RecipientService service.
type RecipientServiceHandler interface {
	// *
	// notifies recipient about successful payment
	ConfirmPayment(context.Context, *connect.Request[recipient.ConfirmPaymentRequest]) (*connect.Response[recipient.ConfirmPaymentIntentResponse], error)
	// *
	// notifies recipient about failed payment
	RejectPaymentIntent(context.Context, *connect.Request[recipient.RejectPaymentIntentRequest]) (*connect.Response[recipient.RejectPaymentIntentResponse], error)
}

// NewRecipientServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRecipientServiceHandler(svc RecipientServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	recipientServiceMethods := recipient.File_tzero_v1_payment_intent_recipient_recipient_proto.Services().ByName("RecipientService").Methods()
	recipientServiceConfirmPaymentHandler := connect.NewUnaryHandler(
		RecipientServiceConfirmPaymentProcedure,
		svc.ConfirmPayment,
		connect.WithSchema(recipientServiceMethods.ByName("ConfirmPayment")),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	recipientServiceRejectPaymentIntentHandler := connect.NewUnaryHandler(
		RecipientServiceRejectPaymentIntentProcedure,
		svc.RejectPaymentIntent,
		connect.WithSchema(recipientServiceMethods.ByName("RejectPaymentIntent")),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	return "/tzero.v1.payment_intent.recipient.RecipientService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RecipientServiceConfirmPaymentProcedure:
			recipientServiceConfirmPaymentHandler.ServeHTTP(w, r)
		case RecipientServiceRejectPaymentIntentProcedure:
			recipientServiceRejectPaymentIntentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRecipientServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRecipientServiceHandler struct{}

func (UnimplementedRecipientServiceHandler) ConfirmPayment(context.Context, *connect.Request[recipient.ConfirmPaymentRequest]) (*connect.Response[recipient.ConfirmPaymentIntentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tzero.v1.payment_intent.recipient.RecipientService.ConfirmPayment is not implemented"))
}

func (UnimplementedRecipientServiceHandler) RejectPaymentIntent(context.Context, *connect.Request[recipient.RejectPaymentIntentRequest]) (*connect.Response[recipient.RejectPaymentIntentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tzero.v1.payment_intent.recipient.RecipientService.RejectPaymentIntent is not implemented"))
}
