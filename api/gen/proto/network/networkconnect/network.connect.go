// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: network/network.proto

package networkconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	network "github.com/t-0-network/provider-sdk-go/api/gen/proto/network"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NetworkServiceName is the fully-qualified name of the NetworkService service.
	NetworkServiceName = "tzero.v1.network.NetworkService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NetworkServiceUpdateQuoteProcedure is the fully-qualified name of the NetworkService's
	// UpdateQuote RPC.
	NetworkServiceUpdateQuoteProcedure = "/tzero.v1.network.NetworkService/UpdateQuote"
	// NetworkServiceGetPayoutQuoteProcedure is the fully-qualified name of the NetworkService's
	// GetPayoutQuote RPC.
	NetworkServiceGetPayoutQuoteProcedure = "/tzero.v1.network.NetworkService/GetPayoutQuote"
	// NetworkServiceCreatePaymentProcedure is the fully-qualified name of the NetworkService's
	// CreatePayment RPC.
	NetworkServiceCreatePaymentProcedure = "/tzero.v1.network.NetworkService/CreatePayment"
	// NetworkServiceUpdatePayoutProcedure is the fully-qualified name of the NetworkService's
	// UpdatePayout RPC.
	NetworkServiceUpdatePayoutProcedure = "/tzero.v1.network.NetworkService/UpdatePayout"
	// NetworkServiceCreatePayInProcedure is the fully-qualified name of the NetworkService's
	// CreatePayIn RPC.
	NetworkServiceCreatePayInProcedure = "/tzero.v1.network.NetworkService/CreatePayIn"
	// NetworkServiceGetKycDataProcedure is the fully-qualified name of the NetworkService's GetKycData
	// RPC.
	NetworkServiceGetKycDataProcedure = "/tzero.v1.network.NetworkService/GetKycData"
)

// NetworkServiceClient is a client for the tzero.v1.network.NetworkService service.
type NetworkServiceClient interface {
	UpdateQuote(context.Context, *connect.Request[network.UpdateQuoteRequest]) (*connect.Response[network.UpdateQuoteResponse], error)
	// get best quote among available matching parameters and limits
	GetPayoutQuote(context.Context, *connect.Request[network.GetPayoutQuoteRequest]) (*connect.Response[network.GetPayoutQuoteResponse], error)
	// network will try to find a provider matching request parameters and limits/credit usage
	CreatePayment(context.Context, *connect.Request[network.CreatePaymentRequest]) (*connect.Response[network.CreatePaymentResponse], error)
	// called when provider made a payout to user
	UpdatePayout(context.Context, *connect.Request[network.UpdatePayoutRequest]) (*connect.Response[network.UpdatePayoutResponse], error)
	// called when provider received payment from user
	CreatePayIn(context.Context, *connect.Request[network.CreatePayInRequest]) (*connect.Response[network.CreatePayInResponse], error)
	GetKycData(context.Context, *connect.Request[network.GetKycDataRequest]) (*connect.Response[network.GetKycDataResponse], error)
}

// NewNetworkServiceClient constructs a client for the tzero.v1.network.NetworkService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNetworkServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NetworkServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	networkServiceMethods := network.File_network_network_proto.Services().ByName("NetworkService").Methods()
	return &networkServiceClient{
		updateQuote: connect.NewClient[network.UpdateQuoteRequest, network.UpdateQuoteResponse](
			httpClient,
			baseURL+NetworkServiceUpdateQuoteProcedure,
			connect.WithSchema(networkServiceMethods.ByName("UpdateQuote")),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		getPayoutQuote: connect.NewClient[network.GetPayoutQuoteRequest, network.GetPayoutQuoteResponse](
			httpClient,
			baseURL+NetworkServiceGetPayoutQuoteProcedure,
			connect.WithSchema(networkServiceMethods.ByName("GetPayoutQuote")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createPayment: connect.NewClient[network.CreatePaymentRequest, network.CreatePaymentResponse](
			httpClient,
			baseURL+NetworkServiceCreatePaymentProcedure,
			connect.WithSchema(networkServiceMethods.ByName("CreatePayment")),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		updatePayout: connect.NewClient[network.UpdatePayoutRequest, network.UpdatePayoutResponse](
			httpClient,
			baseURL+NetworkServiceUpdatePayoutProcedure,
			connect.WithSchema(networkServiceMethods.ByName("UpdatePayout")),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		createPayIn: connect.NewClient[network.CreatePayInRequest, network.CreatePayInResponse](
			httpClient,
			baseURL+NetworkServiceCreatePayInProcedure,
			connect.WithSchema(networkServiceMethods.ByName("CreatePayIn")),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		getKycData: connect.NewClient[network.GetKycDataRequest, network.GetKycDataResponse](
			httpClient,
			baseURL+NetworkServiceGetKycDataProcedure,
			connect.WithSchema(networkServiceMethods.ByName("GetKycData")),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
	}
}

// networkServiceClient implements NetworkServiceClient.
type networkServiceClient struct {
	updateQuote    *connect.Client[network.UpdateQuoteRequest, network.UpdateQuoteResponse]
	getPayoutQuote *connect.Client[network.GetPayoutQuoteRequest, network.GetPayoutQuoteResponse]
	createPayment  *connect.Client[network.CreatePaymentRequest, network.CreatePaymentResponse]
	updatePayout   *connect.Client[network.UpdatePayoutRequest, network.UpdatePayoutResponse]
	createPayIn    *connect.Client[network.CreatePayInRequest, network.CreatePayInResponse]
	getKycData     *connect.Client[network.GetKycDataRequest, network.GetKycDataResponse]
}

// UpdateQuote calls tzero.v1.network.NetworkService.UpdateQuote.
func (c *networkServiceClient) UpdateQuote(ctx context.Context, req *connect.Request[network.UpdateQuoteRequest]) (*connect.Response[network.UpdateQuoteResponse], error) {
	return c.updateQuote.CallUnary(ctx, req)
}

// GetPayoutQuote calls tzero.v1.network.NetworkService.GetPayoutQuote.
func (c *networkServiceClient) GetPayoutQuote(ctx context.Context, req *connect.Request[network.GetPayoutQuoteRequest]) (*connect.Response[network.GetPayoutQuoteResponse], error) {
	return c.getPayoutQuote.CallUnary(ctx, req)
}

// CreatePayment calls tzero.v1.network.NetworkService.CreatePayment.
func (c *networkServiceClient) CreatePayment(ctx context.Context, req *connect.Request[network.CreatePaymentRequest]) (*connect.Response[network.CreatePaymentResponse], error) {
	return c.createPayment.CallUnary(ctx, req)
}

// UpdatePayout calls tzero.v1.network.NetworkService.UpdatePayout.
func (c *networkServiceClient) UpdatePayout(ctx context.Context, req *connect.Request[network.UpdatePayoutRequest]) (*connect.Response[network.UpdatePayoutResponse], error) {
	return c.updatePayout.CallUnary(ctx, req)
}

// CreatePayIn calls tzero.v1.network.NetworkService.CreatePayIn.
func (c *networkServiceClient) CreatePayIn(ctx context.Context, req *connect.Request[network.CreatePayInRequest]) (*connect.Response[network.CreatePayInResponse], error) {
	return c.createPayIn.CallUnary(ctx, req)
}

// GetKycData calls tzero.v1.network.NetworkService.GetKycData.
func (c *networkServiceClient) GetKycData(ctx context.Context, req *connect.Request[network.GetKycDataRequest]) (*connect.Response[network.GetKycDataResponse], error) {
	return c.getKycData.CallUnary(ctx, req)
}

// NetworkServiceHandler is an implementation of the tzero.v1.network.NetworkService service.
type NetworkServiceHandler interface {
	UpdateQuote(context.Context, *connect.Request[network.UpdateQuoteRequest]) (*connect.Response[network.UpdateQuoteResponse], error)
	// get best quote among available matching parameters and limits
	GetPayoutQuote(context.Context, *connect.Request[network.GetPayoutQuoteRequest]) (*connect.Response[network.GetPayoutQuoteResponse], error)
	// network will try to find a provider matching request parameters and limits/credit usage
	CreatePayment(context.Context, *connect.Request[network.CreatePaymentRequest]) (*connect.Response[network.CreatePaymentResponse], error)
	// called when provider made a payout to user
	UpdatePayout(context.Context, *connect.Request[network.UpdatePayoutRequest]) (*connect.Response[network.UpdatePayoutResponse], error)
	// called when provider received payment from user
	CreatePayIn(context.Context, *connect.Request[network.CreatePayInRequest]) (*connect.Response[network.CreatePayInResponse], error)
	GetKycData(context.Context, *connect.Request[network.GetKycDataRequest]) (*connect.Response[network.GetKycDataResponse], error)
}

// NewNetworkServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNetworkServiceHandler(svc NetworkServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	networkServiceMethods := network.File_network_network_proto.Services().ByName("NetworkService").Methods()
	networkServiceUpdateQuoteHandler := connect.NewUnaryHandler(
		NetworkServiceUpdateQuoteProcedure,
		svc.UpdateQuote,
		connect.WithSchema(networkServiceMethods.ByName("UpdateQuote")),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	networkServiceGetPayoutQuoteHandler := connect.NewUnaryHandler(
		NetworkServiceGetPayoutQuoteProcedure,
		svc.GetPayoutQuote,
		connect.WithSchema(networkServiceMethods.ByName("GetPayoutQuote")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	networkServiceCreatePaymentHandler := connect.NewUnaryHandler(
		NetworkServiceCreatePaymentProcedure,
		svc.CreatePayment,
		connect.WithSchema(networkServiceMethods.ByName("CreatePayment")),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	networkServiceUpdatePayoutHandler := connect.NewUnaryHandler(
		NetworkServiceUpdatePayoutProcedure,
		svc.UpdatePayout,
		connect.WithSchema(networkServiceMethods.ByName("UpdatePayout")),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	networkServiceCreatePayInHandler := connect.NewUnaryHandler(
		NetworkServiceCreatePayInProcedure,
		svc.CreatePayIn,
		connect.WithSchema(networkServiceMethods.ByName("CreatePayIn")),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	networkServiceGetKycDataHandler := connect.NewUnaryHandler(
		NetworkServiceGetKycDataProcedure,
		svc.GetKycData,
		connect.WithSchema(networkServiceMethods.ByName("GetKycData")),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	return "/tzero.v1.network.NetworkService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NetworkServiceUpdateQuoteProcedure:
			networkServiceUpdateQuoteHandler.ServeHTTP(w, r)
		case NetworkServiceGetPayoutQuoteProcedure:
			networkServiceGetPayoutQuoteHandler.ServeHTTP(w, r)
		case NetworkServiceCreatePaymentProcedure:
			networkServiceCreatePaymentHandler.ServeHTTP(w, r)
		case NetworkServiceUpdatePayoutProcedure:
			networkServiceUpdatePayoutHandler.ServeHTTP(w, r)
		case NetworkServiceCreatePayInProcedure:
			networkServiceCreatePayInHandler.ServeHTTP(w, r)
		case NetworkServiceGetKycDataProcedure:
			networkServiceGetKycDataHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNetworkServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNetworkServiceHandler struct{}

func (UnimplementedNetworkServiceHandler) UpdateQuote(context.Context, *connect.Request[network.UpdateQuoteRequest]) (*connect.Response[network.UpdateQuoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tzero.v1.network.NetworkService.UpdateQuote is not implemented"))
}

func (UnimplementedNetworkServiceHandler) GetPayoutQuote(context.Context, *connect.Request[network.GetPayoutQuoteRequest]) (*connect.Response[network.GetPayoutQuoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tzero.v1.network.NetworkService.GetPayoutQuote is not implemented"))
}

func (UnimplementedNetworkServiceHandler) CreatePayment(context.Context, *connect.Request[network.CreatePaymentRequest]) (*connect.Response[network.CreatePaymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tzero.v1.network.NetworkService.CreatePayment is not implemented"))
}

func (UnimplementedNetworkServiceHandler) UpdatePayout(context.Context, *connect.Request[network.UpdatePayoutRequest]) (*connect.Response[network.UpdatePayoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tzero.v1.network.NetworkService.UpdatePayout is not implemented"))
}

func (UnimplementedNetworkServiceHandler) CreatePayIn(context.Context, *connect.Request[network.CreatePayInRequest]) (*connect.Response[network.CreatePayInResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tzero.v1.network.NetworkService.CreatePayIn is not implemented"))
}

func (UnimplementedNetworkServiceHandler) GetKycData(context.Context, *connect.Request[network.GetKycDataRequest]) (*connect.Response[network.GetKycDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tzero.v1.network.NetworkService.GetKycData is not implemented"))
}
