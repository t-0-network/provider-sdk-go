// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: network/network.proto

package network

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UpdateQuoteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateQuoteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateQuoteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateQuoteRequestMultiError, or nil if none found.
func (m *UpdateQuoteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateQuoteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPayOut() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateQuoteRequestValidationError{
						field:  fmt.Sprintf("PayOut[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateQuoteRequestValidationError{
						field:  fmt.Sprintf("PayOut[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateQuoteRequestValidationError{
					field:  fmt.Sprintf("PayOut[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPayIn() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateQuoteRequestValidationError{
						field:  fmt.Sprintf("PayIn[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateQuoteRequestValidationError{
						field:  fmt.Sprintf("PayIn[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateQuoteRequestValidationError{
					field:  fmt.Sprintf("PayIn[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateQuoteRequestMultiError(errors)
	}

	return nil
}

// UpdateQuoteRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateQuoteRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateQuoteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateQuoteRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateQuoteRequestMultiError) AllErrors() []error { return m }

// UpdateQuoteRequestValidationError is the validation error returned by
// UpdateQuoteRequest.Validate if the designated constraints aren't met.
type UpdateQuoteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateQuoteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateQuoteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateQuoteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateQuoteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateQuoteRequestValidationError) ErrorName() string {
	return "UpdateQuoteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateQuoteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateQuoteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateQuoteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateQuoteRequestValidationError{}

// Validate checks the field values on UpdateQuoteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateQuoteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateQuoteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateQuoteResponseMultiError, or nil if none found.
func (m *UpdateQuoteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateQuoteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateQuoteResponseMultiError(errors)
	}

	return nil
}

// UpdateQuoteResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateQuoteResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateQuoteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateQuoteResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateQuoteResponseMultiError) AllErrors() []error { return m }

// UpdateQuoteResponseValidationError is the validation error returned by
// UpdateQuoteResponse.Validate if the designated constraints aren't met.
type UpdateQuoteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateQuoteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateQuoteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateQuoteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateQuoteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateQuoteResponseValidationError) ErrorName() string {
	return "UpdateQuoteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateQuoteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateQuoteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateQuoteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateQuoteResponseValidationError{}

// Validate checks the field values on GetPayoutQuoteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPayoutQuoteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPayoutQuoteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPayoutQuoteRequestMultiError, or nil if none found.
func (m *GetPayoutQuoteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPayoutQuoteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PayoutCurrency

	if all {
		switch v := interface{}(m.GetAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPayoutQuoteRequestValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPayoutQuoteRequestValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPayoutQuoteRequestValidationError{
				field:  "Amount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for QuoteType

	if len(errors) > 0 {
		return GetPayoutQuoteRequestMultiError(errors)
	}

	return nil
}

// GetPayoutQuoteRequestMultiError is an error wrapping multiple validation
// errors returned by GetPayoutQuoteRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPayoutQuoteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPayoutQuoteRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPayoutQuoteRequestMultiError) AllErrors() []error { return m }

// GetPayoutQuoteRequestValidationError is the validation error returned by
// GetPayoutQuoteRequest.Validate if the designated constraints aren't met.
type GetPayoutQuoteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPayoutQuoteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPayoutQuoteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPayoutQuoteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPayoutQuoteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPayoutQuoteRequestValidationError) ErrorName() string {
	return "GetPayoutQuoteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPayoutQuoteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPayoutQuoteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPayoutQuoteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPayoutQuoteRequestValidationError{}

// Validate checks the field values on GetPayoutQuoteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPayoutQuoteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPayoutQuoteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPayoutQuoteResponseMultiError, or nil if none found.
func (m *GetPayoutQuoteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPayoutQuoteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPayoutQuoteResponseValidationError{
					field:  "Rate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPayoutQuoteResponseValidationError{
					field:  "Rate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPayoutQuoteResponseValidationError{
				field:  "Rate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpiration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPayoutQuoteResponseValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPayoutQuoteResponseValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPayoutQuoteResponseValidationError{
				field:  "Expiration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetQuoteId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPayoutQuoteResponseValidationError{
					field:  "QuoteId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPayoutQuoteResponseValidationError{
					field:  "QuoteId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuoteId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPayoutQuoteResponseValidationError{
				field:  "QuoteId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPayoutQuoteResponseMultiError(errors)
	}

	return nil
}

// GetPayoutQuoteResponseMultiError is an error wrapping multiple validation
// errors returned by GetPayoutQuoteResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPayoutQuoteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPayoutQuoteResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPayoutQuoteResponseMultiError) AllErrors() []error { return m }

// GetPayoutQuoteResponseValidationError is the validation error returned by
// GetPayoutQuoteResponse.Validate if the designated constraints aren't met.
type GetPayoutQuoteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPayoutQuoteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPayoutQuoteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPayoutQuoteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPayoutQuoteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPayoutQuoteResponseValidationError) ErrorName() string {
	return "GetPayoutQuoteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPayoutQuoteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPayoutQuoteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPayoutQuoteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPayoutQuoteResponseValidationError{}

// Validate checks the field values on CreatePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentRequestMultiError, or nil if none found.
func (m *CreatePaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentClientId

	// no validation rules for PayoutCurrency

	if all {
		switch v := interface{}(m.GetAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePaymentRequestValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePaymentRequestValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePaymentRequestValidationError{
				field:  "Amount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSender()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePaymentRequestValidationError{
					field:  "Sender",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePaymentRequestValidationError{
					field:  "Sender",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSender()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePaymentRequestValidationError{
				field:  "Sender",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRecipient()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePaymentRequestValidationError{
					field:  "Recipient",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePaymentRequestValidationError{
					field:  "Recipient",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecipient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePaymentRequestValidationError{
				field:  "Recipient",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.PayinCurrency != nil {
		// no validation rules for PayinCurrency
	}

	if m.Reference != nil {
		// no validation rules for Reference
	}

	if m.QuoteId != nil {

		if all {
			switch v := interface{}(m.GetQuoteId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreatePaymentRequestValidationError{
						field:  "QuoteId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreatePaymentRequestValidationError{
						field:  "QuoteId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQuoteId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreatePaymentRequestValidationError{
					field:  "QuoteId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreatePaymentRequestMultiError(errors)
	}

	return nil
}

// CreatePaymentRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePaymentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentRequestMultiError) AllErrors() []error { return m }

// CreatePaymentRequestValidationError is the validation error returned by
// CreatePaymentRequest.Validate if the designated constraints aren't met.
type CreatePaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentRequestValidationError) ErrorName() string {
	return "CreatePaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentRequestValidationError{}

// Validate checks the field values on QuoteId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QuoteId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuoteId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in QuoteIdMultiError, or nil if none found.
func (m *QuoteId) ValidateAll() error {
	return m.validate(true)
}

func (m *QuoteId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for QuoteId

	// no validation rules for ProviderId

	if len(errors) > 0 {
		return QuoteIdMultiError(errors)
	}

	return nil
}

// QuoteIdMultiError is an error wrapping multiple validation errors returned
// by QuoteId.ValidateAll() if the designated constraints aren't met.
type QuoteIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuoteIdMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuoteIdMultiError) AllErrors() []error { return m }

// QuoteIdValidationError is the validation error returned by QuoteId.Validate
// if the designated constraints aren't met.
type QuoteIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuoteIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuoteIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuoteIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuoteIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuoteIdValidationError) ErrorName() string { return "QuoteIdValidationError" }

// Error satisfies the builtin error interface
func (e QuoteIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuoteId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuoteIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuoteIdValidationError{}

// Validate checks the field values on CreatePaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentResponseMultiError, or nil if none found.
func (m *CreatePaymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentClientId

	switch v := m.Result.(type) {
	case *CreatePaymentResponse_Success_:
		if v == nil {
			err := CreatePaymentResponseValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSuccess()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreatePaymentResponseValidationError{
						field:  "Success",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreatePaymentResponseValidationError{
						field:  "Success",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSuccess()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreatePaymentResponseValidationError{
					field:  "Success",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CreatePaymentResponse_Failure_:
		if v == nil {
			err := CreatePaymentResponseValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFailure()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreatePaymentResponseValidationError{
						field:  "Failure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreatePaymentResponseValidationError{
						field:  "Failure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFailure()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreatePaymentResponseValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CreatePaymentResponseMultiError(errors)
	}

	return nil
}

// CreatePaymentResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePaymentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePaymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentResponseMultiError) AllErrors() []error { return m }

// CreatePaymentResponseValidationError is the validation error returned by
// CreatePaymentResponse.Validate if the designated constraints aren't met.
type CreatePaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentResponseValidationError) ErrorName() string {
	return "CreatePaymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentResponseValidationError{}

// Validate checks the field values on UpdatePayoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePayoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePayoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePayoutRequestMultiError, or nil if none found.
func (m *UpdatePayoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePayoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentId

	// no validation rules for PayoutId

	switch v := m.Result.(type) {
	case *UpdatePayoutRequest_Success_:
		if v == nil {
			err := UpdatePayoutRequestValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSuccess()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdatePayoutRequestValidationError{
						field:  "Success",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdatePayoutRequestValidationError{
						field:  "Success",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSuccess()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdatePayoutRequestValidationError{
					field:  "Success",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdatePayoutRequest_Failure_:
		if v == nil {
			err := UpdatePayoutRequestValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFailure()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdatePayoutRequestValidationError{
						field:  "Failure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdatePayoutRequestValidationError{
						field:  "Failure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFailure()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdatePayoutRequestValidationError{
					field:  "Failure",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UpdatePayoutRequestMultiError(errors)
	}

	return nil
}

// UpdatePayoutRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePayoutRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePayoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePayoutRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePayoutRequestMultiError) AllErrors() []error { return m }

// UpdatePayoutRequestValidationError is the validation error returned by
// UpdatePayoutRequest.Validate if the designated constraints aren't met.
type UpdatePayoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePayoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePayoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePayoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePayoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePayoutRequestValidationError) ErrorName() string {
	return "UpdatePayoutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePayoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePayoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePayoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePayoutRequestValidationError{}

// Validate checks the field values on UpdatePayoutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePayoutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePayoutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePayoutResponseMultiError, or nil if none found.
func (m *UpdatePayoutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePayoutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePayoutResponseMultiError(errors)
	}

	return nil
}

// UpdatePayoutResponseMultiError is an error wrapping multiple validation
// errors returned by UpdatePayoutResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdatePayoutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePayoutResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePayoutResponseMultiError) AllErrors() []error { return m }

// UpdatePayoutResponseValidationError is the validation error returned by
// UpdatePayoutResponse.Validate if the designated constraints aren't met.
type UpdatePayoutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePayoutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePayoutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePayoutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePayoutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePayoutResponseValidationError) ErrorName() string {
	return "UpdatePayoutResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePayoutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePayoutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePayoutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePayoutResponseValidationError{}

// Validate checks the field values on GetKycDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetKycDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKycDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetKycDataRequestMultiError, or nil if none found.
func (m *GetKycDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKycDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Account.(type) {
	case *GetKycDataRequest_PersonId:
		if v == nil {
			err := GetKycDataRequestValidationError{
				field:  "Account",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for PersonId
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetKycDataRequestMultiError(errors)
	}

	return nil
}

// GetKycDataRequestMultiError is an error wrapping multiple validation errors
// returned by GetKycDataRequest.ValidateAll() if the designated constraints
// aren't met.
type GetKycDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKycDataRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKycDataRequestMultiError) AllErrors() []error { return m }

// GetKycDataRequestValidationError is the validation error returned by
// GetKycDataRequest.Validate if the designated constraints aren't met.
type GetKycDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKycDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKycDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKycDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKycDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKycDataRequestValidationError) ErrorName() string {
	return "GetKycDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetKycDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKycDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKycDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKycDataRequestValidationError{}

// Validate checks the field values on GetKycDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetKycDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKycDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetKycDataResponseMultiError, or nil if none found.
func (m *GetKycDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKycDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.KycData.(type) {
	case *GetKycDataResponse_SumsubKycToken:
		if v == nil {
			err := GetKycDataResponseValidationError{
				field:  "KycData",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for SumsubKycToken
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetKycDataResponseMultiError(errors)
	}

	return nil
}

// GetKycDataResponseMultiError is an error wrapping multiple validation errors
// returned by GetKycDataResponse.ValidateAll() if the designated constraints
// aren't met.
type GetKycDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKycDataResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKycDataResponseMultiError) AllErrors() []error { return m }

// GetKycDataResponseValidationError is the validation error returned by
// GetKycDataResponse.Validate if the designated constraints aren't met.
type GetKycDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKycDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKycDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKycDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKycDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKycDataResponseValidationError) ErrorName() string {
	return "GetKycDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetKycDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKycDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKycDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKycDataResponseValidationError{}

// Validate checks the field values on CreatePayInRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePayInRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePayInRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePayInRequestMultiError, or nil if none found.
func (m *CreatePayInRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePayInRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentId

	if all {
		switch v := interface{}(m.GetAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePayInRequestValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePayInRequestValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePayInRequestValidationError{
				field:  "Amount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePayInRequestMultiError(errors)
	}

	return nil
}

// CreatePayInRequestMultiError is an error wrapping multiple validation errors
// returned by CreatePayInRequest.ValidateAll() if the designated constraints
// aren't met.
type CreatePayInRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePayInRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePayInRequestMultiError) AllErrors() []error { return m }

// CreatePayInRequestValidationError is the validation error returned by
// CreatePayInRequest.Validate if the designated constraints aren't met.
type CreatePayInRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePayInRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePayInRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePayInRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePayInRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePayInRequestValidationError) ErrorName() string {
	return "CreatePayInRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePayInRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePayInRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePayInRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePayInRequestValidationError{}

// Validate checks the field values on CreatePayInResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePayInResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePayInResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePayInResponseMultiError, or nil if none found.
func (m *CreatePayInResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePayInResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreatePayInResponseMultiError(errors)
	}

	return nil
}

// CreatePayInResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePayInResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePayInResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePayInResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePayInResponseMultiError) AllErrors() []error { return m }

// CreatePayInResponseValidationError is the validation error returned by
// CreatePayInResponse.Validate if the designated constraints aren't met.
type CreatePayInResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePayInResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePayInResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePayInResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePayInResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePayInResponseValidationError) ErrorName() string {
	return "CreatePayInResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePayInResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePayInResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePayInResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePayInResponseValidationError{}

// Validate checks the field values on UpdateQuoteRequest_Quote with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateQuoteRequest_Quote) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateQuoteRequest_Quote with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateQuoteRequest_QuoteMultiError, or nil if none found.
func (m *UpdateQuoteRequest_Quote) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateQuoteRequest_Quote) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Currency

	// no validation rules for QuoteType

	for idx, item := range m.GetBands() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateQuoteRequest_QuoteValidationError{
						field:  fmt.Sprintf("Bands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateQuoteRequest_QuoteValidationError{
						field:  fmt.Sprintf("Bands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateQuoteRequest_QuoteValidationError{
					field:  fmt.Sprintf("Bands[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetExpiration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateQuoteRequest_QuoteValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateQuoteRequest_QuoteValidationError{
					field:  "Expiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateQuoteRequest_QuoteValidationError{
				field:  "Expiration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateQuoteRequest_QuoteValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateQuoteRequest_QuoteValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateQuoteRequest_QuoteValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateQuoteRequest_QuoteMultiError(errors)
	}

	return nil
}

// UpdateQuoteRequest_QuoteMultiError is an error wrapping multiple validation
// errors returned by UpdateQuoteRequest_Quote.ValidateAll() if the designated
// constraints aren't met.
type UpdateQuoteRequest_QuoteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateQuoteRequest_QuoteMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateQuoteRequest_QuoteMultiError) AllErrors() []error { return m }

// UpdateQuoteRequest_QuoteValidationError is the validation error returned by
// UpdateQuoteRequest_Quote.Validate if the designated constraints aren't met.
type UpdateQuoteRequest_QuoteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateQuoteRequest_QuoteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateQuoteRequest_QuoteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateQuoteRequest_QuoteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateQuoteRequest_QuoteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateQuoteRequest_QuoteValidationError) ErrorName() string {
	return "UpdateQuoteRequest_QuoteValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateQuoteRequest_QuoteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateQuoteRequest_Quote.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateQuoteRequest_QuoteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateQuoteRequest_QuoteValidationError{}

// Validate checks the field values on UpdateQuoteRequest_Quote_Band with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateQuoteRequest_Quote_Band) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateQuoteRequest_Quote_Band with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateQuoteRequest_Quote_BandMultiError, or nil if none found.
func (m *UpdateQuoteRequest_Quote_Band) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateQuoteRequest_Quote_Band) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientQuoteId

	if all {
		switch v := interface{}(m.GetMaxAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateQuoteRequest_Quote_BandValidationError{
					field:  "MaxAmount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateQuoteRequest_Quote_BandValidationError{
					field:  "MaxAmount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateQuoteRequest_Quote_BandValidationError{
				field:  "MaxAmount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateQuoteRequest_Quote_BandValidationError{
					field:  "Rate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateQuoteRequest_Quote_BandValidationError{
					field:  "Rate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateQuoteRequest_Quote_BandValidationError{
				field:  "Rate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateQuoteRequest_Quote_BandMultiError(errors)
	}

	return nil
}

// UpdateQuoteRequest_Quote_BandMultiError is an error wrapping multiple
// validation errors returned by UpdateQuoteRequest_Quote_Band.ValidateAll()
// if the designated constraints aren't met.
type UpdateQuoteRequest_Quote_BandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateQuoteRequest_Quote_BandMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateQuoteRequest_Quote_BandMultiError) AllErrors() []error { return m }

// UpdateQuoteRequest_Quote_BandValidationError is the validation error
// returned by UpdateQuoteRequest_Quote_Band.Validate if the designated
// constraints aren't met.
type UpdateQuoteRequest_Quote_BandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateQuoteRequest_Quote_BandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateQuoteRequest_Quote_BandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateQuoteRequest_Quote_BandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateQuoteRequest_Quote_BandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateQuoteRequest_Quote_BandValidationError) ErrorName() string {
	return "UpdateQuoteRequest_Quote_BandValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateQuoteRequest_Quote_BandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateQuoteRequest_Quote_Band.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateQuoteRequest_Quote_BandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateQuoteRequest_Quote_BandValidationError{}

// Validate checks the field values on CreatePaymentRequest_Sender with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentRequest_Sender) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentRequest_Sender with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentRequest_SenderMultiError, or nil if none found.
func (m *CreatePaymentRequest_Sender) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentRequest_Sender) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Sender.(type) {
	case *CreatePaymentRequest_Sender_PrivatePerson:
		if v == nil {
			err := CreatePaymentRequest_SenderValidationError{
				field:  "Sender",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPrivatePerson()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreatePaymentRequest_SenderValidationError{
						field:  "PrivatePerson",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreatePaymentRequest_SenderValidationError{
						field:  "PrivatePerson",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPrivatePerson()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreatePaymentRequest_SenderValidationError{
					field:  "PrivatePerson",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CreatePaymentRequest_SenderMultiError(errors)
	}

	return nil
}

// CreatePaymentRequest_SenderMultiError is an error wrapping multiple
// validation errors returned by CreatePaymentRequest_Sender.ValidateAll() if
// the designated constraints aren't met.
type CreatePaymentRequest_SenderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentRequest_SenderMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentRequest_SenderMultiError) AllErrors() []error { return m }

// CreatePaymentRequest_SenderValidationError is the validation error returned
// by CreatePaymentRequest_Sender.Validate if the designated constraints
// aren't met.
type CreatePaymentRequest_SenderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentRequest_SenderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentRequest_SenderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentRequest_SenderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentRequest_SenderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentRequest_SenderValidationError) ErrorName() string {
	return "CreatePaymentRequest_SenderValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentRequest_SenderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentRequest_Sender.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentRequest_SenderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentRequest_SenderValidationError{}

// Validate checks the field values on CreatePaymentRequest_Recipient with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentRequest_Recipient) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentRequest_Recipient with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePaymentRequest_RecipientMultiError, or nil if none found.
func (m *CreatePaymentRequest_Recipient) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentRequest_Recipient) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Recipient.(type) {
	case *CreatePaymentRequest_Recipient_PrivatePerson:
		if v == nil {
			err := CreatePaymentRequest_RecipientValidationError{
				field:  "Recipient",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPrivatePerson()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreatePaymentRequest_RecipientValidationError{
						field:  "PrivatePerson",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreatePaymentRequest_RecipientValidationError{
						field:  "PrivatePerson",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPrivatePerson()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreatePaymentRequest_RecipientValidationError{
					field:  "PrivatePerson",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CreatePaymentRequest_RecipientMultiError(errors)
	}

	return nil
}

// CreatePaymentRequest_RecipientMultiError is an error wrapping multiple
// validation errors returned by CreatePaymentRequest_Recipient.ValidateAll()
// if the designated constraints aren't met.
type CreatePaymentRequest_RecipientMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentRequest_RecipientMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentRequest_RecipientMultiError) AllErrors() []error { return m }

// CreatePaymentRequest_RecipientValidationError is the validation error
// returned by CreatePaymentRequest_Recipient.Validate if the designated
// constraints aren't met.
type CreatePaymentRequest_RecipientValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentRequest_RecipientValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentRequest_RecipientValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentRequest_RecipientValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentRequest_RecipientValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentRequest_RecipientValidationError) ErrorName() string {
	return "CreatePaymentRequest_RecipientValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentRequest_RecipientValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentRequest_Recipient.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentRequest_RecipientValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentRequest_RecipientValidationError{}

// Validate checks the field values on CreatePaymentRequest_PrivatePerson with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreatePaymentRequest_PrivatePerson) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentRequest_PrivatePerson
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreatePaymentRequest_PrivatePersonMultiError, or nil if none found.
func (m *CreatePaymentRequest_PrivatePerson) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentRequest_PrivatePerson) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PrivatePersonClientId

	// no validation rules for FirstName

	// no validation rules for LastName

	if len(errors) > 0 {
		return CreatePaymentRequest_PrivatePersonMultiError(errors)
	}

	return nil
}

// CreatePaymentRequest_PrivatePersonMultiError is an error wrapping multiple
// validation errors returned by
// CreatePaymentRequest_PrivatePerson.ValidateAll() if the designated
// constraints aren't met.
type CreatePaymentRequest_PrivatePersonMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentRequest_PrivatePersonMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentRequest_PrivatePersonMultiError) AllErrors() []error { return m }

// CreatePaymentRequest_PrivatePersonValidationError is the validation error
// returned by CreatePaymentRequest_PrivatePerson.Validate if the designated
// constraints aren't met.
type CreatePaymentRequest_PrivatePersonValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentRequest_PrivatePersonValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentRequest_PrivatePersonValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentRequest_PrivatePersonValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentRequest_PrivatePersonValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentRequest_PrivatePersonValidationError) ErrorName() string {
	return "CreatePaymentRequest_PrivatePersonValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentRequest_PrivatePersonValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentRequest_PrivatePerson.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentRequest_PrivatePersonValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentRequest_PrivatePersonValidationError{}

// Validate checks the field values on CreatePaymentResponse_Success with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentResponse_Success) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentResponse_Success with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePaymentResponse_SuccessMultiError, or nil if none found.
func (m *CreatePaymentResponse_Success) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentResponse_Success) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentId

	if len(errors) > 0 {
		return CreatePaymentResponse_SuccessMultiError(errors)
	}

	return nil
}

// CreatePaymentResponse_SuccessMultiError is an error wrapping multiple
// validation errors returned by CreatePaymentResponse_Success.ValidateAll()
// if the designated constraints aren't met.
type CreatePaymentResponse_SuccessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentResponse_SuccessMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentResponse_SuccessMultiError) AllErrors() []error { return m }

// CreatePaymentResponse_SuccessValidationError is the validation error
// returned by CreatePaymentResponse_Success.Validate if the designated
// constraints aren't met.
type CreatePaymentResponse_SuccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentResponse_SuccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentResponse_SuccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentResponse_SuccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentResponse_SuccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentResponse_SuccessValidationError) ErrorName() string {
	return "CreatePaymentResponse_SuccessValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentResponse_SuccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentResponse_Success.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentResponse_SuccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentResponse_SuccessValidationError{}

// Validate checks the field values on CreatePaymentResponse_Failure with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentResponse_Failure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentResponse_Failure with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePaymentResponse_FailureMultiError, or nil if none found.
func (m *CreatePaymentResponse_Failure) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentResponse_Failure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreatePaymentResponse_FailureMultiError(errors)
	}

	return nil
}

// CreatePaymentResponse_FailureMultiError is an error wrapping multiple
// validation errors returned by CreatePaymentResponse_Failure.ValidateAll()
// if the designated constraints aren't met.
type CreatePaymentResponse_FailureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentResponse_FailureMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentResponse_FailureMultiError) AllErrors() []error { return m }

// CreatePaymentResponse_FailureValidationError is the validation error
// returned by CreatePaymentResponse_Failure.Validate if the designated
// constraints aren't met.
type CreatePaymentResponse_FailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentResponse_FailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentResponse_FailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentResponse_FailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentResponse_FailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentResponse_FailureValidationError) ErrorName() string {
	return "CreatePaymentResponse_FailureValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentResponse_FailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentResponse_Failure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentResponse_FailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentResponse_FailureValidationError{}

// Validate checks the field values on UpdatePayoutRequest_Success with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePayoutRequest_Success) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePayoutRequest_Success with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePayoutRequest_SuccessMultiError, or nil if none found.
func (m *UpdatePayoutRequest_Success) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePayoutRequest_Success) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePayoutRequest_SuccessMultiError(errors)
	}

	return nil
}

// UpdatePayoutRequest_SuccessMultiError is an error wrapping multiple
// validation errors returned by UpdatePayoutRequest_Success.ValidateAll() if
// the designated constraints aren't met.
type UpdatePayoutRequest_SuccessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePayoutRequest_SuccessMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePayoutRequest_SuccessMultiError) AllErrors() []error { return m }

// UpdatePayoutRequest_SuccessValidationError is the validation error returned
// by UpdatePayoutRequest_Success.Validate if the designated constraints
// aren't met.
type UpdatePayoutRequest_SuccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePayoutRequest_SuccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePayoutRequest_SuccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePayoutRequest_SuccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePayoutRequest_SuccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePayoutRequest_SuccessValidationError) ErrorName() string {
	return "UpdatePayoutRequest_SuccessValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePayoutRequest_SuccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePayoutRequest_Success.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePayoutRequest_SuccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePayoutRequest_SuccessValidationError{}

// Validate checks the field values on UpdatePayoutRequest_Failure with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePayoutRequest_Failure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePayoutRequest_Failure with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePayoutRequest_FailureMultiError, or nil if none found.
func (m *UpdatePayoutRequest_Failure) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePayoutRequest_Failure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePayoutRequest_FailureMultiError(errors)
	}

	return nil
}

// UpdatePayoutRequest_FailureMultiError is an error wrapping multiple
// validation errors returned by UpdatePayoutRequest_Failure.ValidateAll() if
// the designated constraints aren't met.
type UpdatePayoutRequest_FailureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePayoutRequest_FailureMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePayoutRequest_FailureMultiError) AllErrors() []error { return m }

// UpdatePayoutRequest_FailureValidationError is the validation error returned
// by UpdatePayoutRequest_Failure.Validate if the designated constraints
// aren't met.
type UpdatePayoutRequest_FailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePayoutRequest_FailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePayoutRequest_FailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePayoutRequest_FailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePayoutRequest_FailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePayoutRequest_FailureValidationError) ErrorName() string {
	return "UpdatePayoutRequest_FailureValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePayoutRequest_FailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePayoutRequest_Failure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePayoutRequest_FailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePayoutRequest_FailureValidationError{}
