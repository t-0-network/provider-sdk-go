// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: public/public.proto

package publicconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	public "github.com/t-0-network/provider-sdk-go/api/gen/proto/public"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PaymentServiceName is the fully-qualified name of the PaymentService service.
	PaymentServiceName = "network.v1.public.PaymentService"
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "network.v1.public.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PaymentServiceGetPaymentQuoteProcedure is the fully-qualified name of the PaymentService's
	// GetPaymentQuote RPC.
	PaymentServiceGetPaymentQuoteProcedure = "/network.v1.public.PaymentService/GetPaymentQuote"
	// PaymentServiceCreatePaymentIntentProcedure is the fully-qualified name of the PaymentService's
	// CreatePaymentIntent RPC.
	PaymentServiceCreatePaymentIntentProcedure = "/network.v1.public.PaymentService/CreatePaymentIntent"
	// PaymentServiceGetPayInDetailsProcedure is the fully-qualified name of the PaymentService's
	// GetPayInDetails RPC.
	PaymentServiceGetPayInDetailsProcedure = "/network.v1.public.PaymentService/GetPayInDetails"
	// PaymentServiceGetPaymentsProcedure is the fully-qualified name of the PaymentService's
	// GetPayments RPC.
	PaymentServiceGetPaymentsProcedure = "/network.v1.public.PaymentService/GetPayments"
	// UserServiceGetCurrentUserProcedure is the fully-qualified name of the UserService's
	// GetCurrentUser RPC.
	UserServiceGetCurrentUserProcedure = "/network.v1.public.UserService/GetCurrentUser"
)

// PaymentServiceClient is a client for the network.v1.public.PaymentService service.
type PaymentServiceClient interface {
	// available without authentication. This will find a pair of best PayIn nad PayOut providers in order to
	// provide best quote for payment
	GetPaymentQuote(context.Context, *connect.Request[public.GetPaymentQuoteRequest]) (*connect.Response[public.GetPaymentQuoteResponse], error)
	// Creates a payment details containing all the required attributes for PayOut
	// requires authentication and completed KYC
	CreatePaymentIntent(context.Context, *connect.Request[public.CreatePaymentIntentRequest]) (*connect.Response[public.CreatePaymentIntentResponse], error)
	// Returns pay in details for the corresponding Payment
	GetPayInDetails(context.Context, *connect.Request[public.GetPayInDetailsRequest]) (*connect.Response[public.GetPayInDetailsResponse], error)
	// Returns history of payments
	GetPayments(context.Context, *connect.Request[public.GetPaymentsRequest]) (*connect.Response[public.GetPaymentsResponse], error)
}

// NewPaymentServiceClient constructs a client for the network.v1.public.PaymentService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPaymentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PaymentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	paymentServiceMethods := public.File_public_public_proto.Services().ByName("PaymentService").Methods()
	return &paymentServiceClient{
		getPaymentQuote: connect.NewClient[public.GetPaymentQuoteRequest, public.GetPaymentQuoteResponse](
			httpClient,
			baseURL+PaymentServiceGetPaymentQuoteProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("GetPaymentQuote")),
			connect.WithClientOptions(opts...),
		),
		createPaymentIntent: connect.NewClient[public.CreatePaymentIntentRequest, public.CreatePaymentIntentResponse](
			httpClient,
			baseURL+PaymentServiceCreatePaymentIntentProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("CreatePaymentIntent")),
			connect.WithClientOptions(opts...),
		),
		getPayInDetails: connect.NewClient[public.GetPayInDetailsRequest, public.GetPayInDetailsResponse](
			httpClient,
			baseURL+PaymentServiceGetPayInDetailsProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("GetPayInDetails")),
			connect.WithClientOptions(opts...),
		),
		getPayments: connect.NewClient[public.GetPaymentsRequest, public.GetPaymentsResponse](
			httpClient,
			baseURL+PaymentServiceGetPaymentsProcedure,
			connect.WithSchema(paymentServiceMethods.ByName("GetPayments")),
			connect.WithClientOptions(opts...),
		),
	}
}

// paymentServiceClient implements PaymentServiceClient.
type paymentServiceClient struct {
	getPaymentQuote     *connect.Client[public.GetPaymentQuoteRequest, public.GetPaymentQuoteResponse]
	createPaymentIntent *connect.Client[public.CreatePaymentIntentRequest, public.CreatePaymentIntentResponse]
	getPayInDetails     *connect.Client[public.GetPayInDetailsRequest, public.GetPayInDetailsResponse]
	getPayments         *connect.Client[public.GetPaymentsRequest, public.GetPaymentsResponse]
}

// GetPaymentQuote calls network.v1.public.PaymentService.GetPaymentQuote.
func (c *paymentServiceClient) GetPaymentQuote(ctx context.Context, req *connect.Request[public.GetPaymentQuoteRequest]) (*connect.Response[public.GetPaymentQuoteResponse], error) {
	return c.getPaymentQuote.CallUnary(ctx, req)
}

// CreatePaymentIntent calls network.v1.public.PaymentService.CreatePaymentIntent.
func (c *paymentServiceClient) CreatePaymentIntent(ctx context.Context, req *connect.Request[public.CreatePaymentIntentRequest]) (*connect.Response[public.CreatePaymentIntentResponse], error) {
	return c.createPaymentIntent.CallUnary(ctx, req)
}

// GetPayInDetails calls network.v1.public.PaymentService.GetPayInDetails.
func (c *paymentServiceClient) GetPayInDetails(ctx context.Context, req *connect.Request[public.GetPayInDetailsRequest]) (*connect.Response[public.GetPayInDetailsResponse], error) {
	return c.getPayInDetails.CallUnary(ctx, req)
}

// GetPayments calls network.v1.public.PaymentService.GetPayments.
func (c *paymentServiceClient) GetPayments(ctx context.Context, req *connect.Request[public.GetPaymentsRequest]) (*connect.Response[public.GetPaymentsResponse], error) {
	return c.getPayments.CallUnary(ctx, req)
}

// PaymentServiceHandler is an implementation of the network.v1.public.PaymentService service.
type PaymentServiceHandler interface {
	// available without authentication. This will find a pair of best PayIn nad PayOut providers in order to
	// provide best quote for payment
	GetPaymentQuote(context.Context, *connect.Request[public.GetPaymentQuoteRequest]) (*connect.Response[public.GetPaymentQuoteResponse], error)
	// Creates a payment details containing all the required attributes for PayOut
	// requires authentication and completed KYC
	CreatePaymentIntent(context.Context, *connect.Request[public.CreatePaymentIntentRequest]) (*connect.Response[public.CreatePaymentIntentResponse], error)
	// Returns pay in details for the corresponding Payment
	GetPayInDetails(context.Context, *connect.Request[public.GetPayInDetailsRequest]) (*connect.Response[public.GetPayInDetailsResponse], error)
	// Returns history of payments
	GetPayments(context.Context, *connect.Request[public.GetPaymentsRequest]) (*connect.Response[public.GetPaymentsResponse], error)
}

// NewPaymentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPaymentServiceHandler(svc PaymentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	paymentServiceMethods := public.File_public_public_proto.Services().ByName("PaymentService").Methods()
	paymentServiceGetPaymentQuoteHandler := connect.NewUnaryHandler(
		PaymentServiceGetPaymentQuoteProcedure,
		svc.GetPaymentQuote,
		connect.WithSchema(paymentServiceMethods.ByName("GetPaymentQuote")),
		connect.WithHandlerOptions(opts...),
	)
	paymentServiceCreatePaymentIntentHandler := connect.NewUnaryHandler(
		PaymentServiceCreatePaymentIntentProcedure,
		svc.CreatePaymentIntent,
		connect.WithSchema(paymentServiceMethods.ByName("CreatePaymentIntent")),
		connect.WithHandlerOptions(opts...),
	)
	paymentServiceGetPayInDetailsHandler := connect.NewUnaryHandler(
		PaymentServiceGetPayInDetailsProcedure,
		svc.GetPayInDetails,
		connect.WithSchema(paymentServiceMethods.ByName("GetPayInDetails")),
		connect.WithHandlerOptions(opts...),
	)
	paymentServiceGetPaymentsHandler := connect.NewUnaryHandler(
		PaymentServiceGetPaymentsProcedure,
		svc.GetPayments,
		connect.WithSchema(paymentServiceMethods.ByName("GetPayments")),
		connect.WithHandlerOptions(opts...),
	)
	return "/network.v1.public.PaymentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PaymentServiceGetPaymentQuoteProcedure:
			paymentServiceGetPaymentQuoteHandler.ServeHTTP(w, r)
		case PaymentServiceCreatePaymentIntentProcedure:
			paymentServiceCreatePaymentIntentHandler.ServeHTTP(w, r)
		case PaymentServiceGetPayInDetailsProcedure:
			paymentServiceGetPayInDetailsHandler.ServeHTTP(w, r)
		case PaymentServiceGetPaymentsProcedure:
			paymentServiceGetPaymentsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPaymentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPaymentServiceHandler struct{}

func (UnimplementedPaymentServiceHandler) GetPaymentQuote(context.Context, *connect.Request[public.GetPaymentQuoteRequest]) (*connect.Response[public.GetPaymentQuoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("network.v1.public.PaymentService.GetPaymentQuote is not implemented"))
}

func (UnimplementedPaymentServiceHandler) CreatePaymentIntent(context.Context, *connect.Request[public.CreatePaymentIntentRequest]) (*connect.Response[public.CreatePaymentIntentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("network.v1.public.PaymentService.CreatePaymentIntent is not implemented"))
}

func (UnimplementedPaymentServiceHandler) GetPayInDetails(context.Context, *connect.Request[public.GetPayInDetailsRequest]) (*connect.Response[public.GetPayInDetailsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("network.v1.public.PaymentService.GetPayInDetails is not implemented"))
}

func (UnimplementedPaymentServiceHandler) GetPayments(context.Context, *connect.Request[public.GetPaymentsRequest]) (*connect.Response[public.GetPaymentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("network.v1.public.PaymentService.GetPayments is not implemented"))
}

// UserServiceClient is a client for the network.v1.public.UserService service.
type UserServiceClient interface {
	GetCurrentUser(context.Context, *connect.Request[public.GetCurrentUserRequest]) (*connect.Response[public.GetCurrentUserResponse], error)
}

// NewUserServiceClient constructs a client for the network.v1.public.UserService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userServiceMethods := public.File_public_public_proto.Services().ByName("UserService").Methods()
	return &userServiceClient{
		getCurrentUser: connect.NewClient[public.GetCurrentUserRequest, public.GetCurrentUserResponse](
			httpClient,
			baseURL+UserServiceGetCurrentUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetCurrentUser")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	getCurrentUser *connect.Client[public.GetCurrentUserRequest, public.GetCurrentUserResponse]
}

// GetCurrentUser calls network.v1.public.UserService.GetCurrentUser.
func (c *userServiceClient) GetCurrentUser(ctx context.Context, req *connect.Request[public.GetCurrentUserRequest]) (*connect.Response[public.GetCurrentUserResponse], error) {
	return c.getCurrentUser.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the network.v1.public.UserService service.
type UserServiceHandler interface {
	GetCurrentUser(context.Context, *connect.Request[public.GetCurrentUserRequest]) (*connect.Response[public.GetCurrentUserResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceMethods := public.File_public_public_proto.Services().ByName("UserService").Methods()
	userServiceGetCurrentUserHandler := connect.NewUnaryHandler(
		UserServiceGetCurrentUserProcedure,
		svc.GetCurrentUser,
		connect.WithSchema(userServiceMethods.ByName("GetCurrentUser")),
		connect.WithHandlerOptions(opts...),
	)
	return "/network.v1.public.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceGetCurrentUserProcedure:
			userServiceGetCurrentUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) GetCurrentUser(context.Context, *connect.Request[public.GetCurrentUserRequest]) (*connect.Response[public.GetCurrentUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("network.v1.public.UserService.GetCurrentUser is not implemented"))
}
