// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: payment_intent/provider/provider.proto

package providerconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	provider "github.com/t-0-network/provider-sdk-go/api/gen/proto/payment_intent/provider"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NetworkServiceName is the fully-qualified name of the NetworkService service.
	NetworkServiceName = "tzero.v1.payment_intent.provider.NetworkService"
	// ProviderServiceName is the fully-qualified name of the ProviderService service.
	ProviderServiceName = "tzero.v1.payment_intent.provider.ProviderService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NetworkServiceConfirmPaymentProcedure is the fully-qualified name of the NetworkService's
	// ConfirmPayment RPC.
	NetworkServiceConfirmPaymentProcedure = "/tzero.v1.payment_intent.provider.NetworkService/ConfirmPayment"
	// NetworkServiceRejectPaymentIntentProcedure is the fully-qualified name of the NetworkService's
	// RejectPaymentIntent RPC.
	NetworkServiceRejectPaymentIntentProcedure = "/tzero.v1.payment_intent.provider.NetworkService/RejectPaymentIntent"
	// NetworkServiceConfirmSettlementProcedure is the fully-qualified name of the NetworkService's
	// ConfirmSettlement RPC.
	NetworkServiceConfirmSettlementProcedure = "/tzero.v1.payment_intent.provider.NetworkService/ConfirmSettlement"
	// ProviderServiceCreatePaymentIntentProcedure is the fully-qualified name of the ProviderService's
	// CreatePaymentIntent RPC.
	ProviderServiceCreatePaymentIntentProcedure = "/tzero.v1.payment_intent.provider.ProviderService/CreatePaymentIntent"
	// ProviderServiceConfirmPayoutProcedure is the fully-qualified name of the ProviderService's
	// ConfirmPayout RPC.
	ProviderServiceConfirmPayoutProcedure = "/tzero.v1.payment_intent.provider.ProviderService/ConfirmPayout"
)

// NetworkServiceClient is a client for the tzero.v1.payment_intent.provider.NetworkService service.
type NetworkServiceClient interface {
	// *
	// Notify network about a successful payment for the corresponding payment intent
	ConfirmPayment(context.Context, *connect.Request[provider.ConfirmPaymentRequest]) (*connect.Response[provider.ConfirmPaymentResponse], error)
	// *
	// Notify network about a payment failure for the corresponding payment intent
	RejectPaymentIntent(context.Context, *connect.Request[provider.RejectPaymentIntentRequest]) (*connect.Response[provider.RejectPaymentIntentResponse], error)
	// *
	// Notify network about relation between payment intent and settlement transaction.
	// This method is not essential but helps to keep track of payment flow
	ConfirmSettlement(context.Context, *connect.Request[provider.ConfirmSettlementRequest]) (*connect.Response[provider.ConfirmSettlementResponse], error)
}

// NewNetworkServiceClient constructs a client for the
// tzero.v1.payment_intent.provider.NetworkService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNetworkServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NetworkServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	networkServiceMethods := provider.File_payment_intent_provider_provider_proto.Services().ByName("NetworkService").Methods()
	return &networkServiceClient{
		confirmPayment: connect.NewClient[provider.ConfirmPaymentRequest, provider.ConfirmPaymentResponse](
			httpClient,
			baseURL+NetworkServiceConfirmPaymentProcedure,
			connect.WithSchema(networkServiceMethods.ByName("ConfirmPayment")),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		rejectPaymentIntent: connect.NewClient[provider.RejectPaymentIntentRequest, provider.RejectPaymentIntentResponse](
			httpClient,
			baseURL+NetworkServiceRejectPaymentIntentProcedure,
			connect.WithSchema(networkServiceMethods.ByName("RejectPaymentIntent")),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		confirmSettlement: connect.NewClient[provider.ConfirmSettlementRequest, provider.ConfirmSettlementResponse](
			httpClient,
			baseURL+NetworkServiceConfirmSettlementProcedure,
			connect.WithSchema(networkServiceMethods.ByName("ConfirmSettlement")),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
	}
}

// networkServiceClient implements NetworkServiceClient.
type networkServiceClient struct {
	confirmPayment      *connect.Client[provider.ConfirmPaymentRequest, provider.ConfirmPaymentResponse]
	rejectPaymentIntent *connect.Client[provider.RejectPaymentIntentRequest, provider.RejectPaymentIntentResponse]
	confirmSettlement   *connect.Client[provider.ConfirmSettlementRequest, provider.ConfirmSettlementResponse]
}

// ConfirmPayment calls tzero.v1.payment_intent.provider.NetworkService.ConfirmPayment.
func (c *networkServiceClient) ConfirmPayment(ctx context.Context, req *connect.Request[provider.ConfirmPaymentRequest]) (*connect.Response[provider.ConfirmPaymentResponse], error) {
	return c.confirmPayment.CallUnary(ctx, req)
}

// RejectPaymentIntent calls tzero.v1.payment_intent.provider.NetworkService.RejectPaymentIntent.
func (c *networkServiceClient) RejectPaymentIntent(ctx context.Context, req *connect.Request[provider.RejectPaymentIntentRequest]) (*connect.Response[provider.RejectPaymentIntentResponse], error) {
	return c.rejectPaymentIntent.CallUnary(ctx, req)
}

// ConfirmSettlement calls tzero.v1.payment_intent.provider.NetworkService.ConfirmSettlement.
func (c *networkServiceClient) ConfirmSettlement(ctx context.Context, req *connect.Request[provider.ConfirmSettlementRequest]) (*connect.Response[provider.ConfirmSettlementResponse], error) {
	return c.confirmSettlement.CallUnary(ctx, req)
}

// NetworkServiceHandler is an implementation of the tzero.v1.payment_intent.provider.NetworkService
// service.
type NetworkServiceHandler interface {
	// *
	// Notify network about a successful payment for the corresponding payment intent
	ConfirmPayment(context.Context, *connect.Request[provider.ConfirmPaymentRequest]) (*connect.Response[provider.ConfirmPaymentResponse], error)
	// *
	// Notify network about a payment failure for the corresponding payment intent
	RejectPaymentIntent(context.Context, *connect.Request[provider.RejectPaymentIntentRequest]) (*connect.Response[provider.RejectPaymentIntentResponse], error)
	// *
	// Notify network about relation between payment intent and settlement transaction.
	// This method is not essential but helps to keep track of payment flow
	ConfirmSettlement(context.Context, *connect.Request[provider.ConfirmSettlementRequest]) (*connect.Response[provider.ConfirmSettlementResponse], error)
}

// NewNetworkServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNetworkServiceHandler(svc NetworkServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	networkServiceMethods := provider.File_payment_intent_provider_provider_proto.Services().ByName("NetworkService").Methods()
	networkServiceConfirmPaymentHandler := connect.NewUnaryHandler(
		NetworkServiceConfirmPaymentProcedure,
		svc.ConfirmPayment,
		connect.WithSchema(networkServiceMethods.ByName("ConfirmPayment")),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	networkServiceRejectPaymentIntentHandler := connect.NewUnaryHandler(
		NetworkServiceRejectPaymentIntentProcedure,
		svc.RejectPaymentIntent,
		connect.WithSchema(networkServiceMethods.ByName("RejectPaymentIntent")),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	networkServiceConfirmSettlementHandler := connect.NewUnaryHandler(
		NetworkServiceConfirmSettlementProcedure,
		svc.ConfirmSettlement,
		connect.WithSchema(networkServiceMethods.ByName("ConfirmSettlement")),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	return "/tzero.v1.payment_intent.provider.NetworkService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NetworkServiceConfirmPaymentProcedure:
			networkServiceConfirmPaymentHandler.ServeHTTP(w, r)
		case NetworkServiceRejectPaymentIntentProcedure:
			networkServiceRejectPaymentIntentHandler.ServeHTTP(w, r)
		case NetworkServiceConfirmSettlementProcedure:
			networkServiceConfirmSettlementHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNetworkServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNetworkServiceHandler struct{}

func (UnimplementedNetworkServiceHandler) ConfirmPayment(context.Context, *connect.Request[provider.ConfirmPaymentRequest]) (*connect.Response[provider.ConfirmPaymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tzero.v1.payment_intent.provider.NetworkService.ConfirmPayment is not implemented"))
}

func (UnimplementedNetworkServiceHandler) RejectPaymentIntent(context.Context, *connect.Request[provider.RejectPaymentIntentRequest]) (*connect.Response[provider.RejectPaymentIntentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tzero.v1.payment_intent.provider.NetworkService.RejectPaymentIntent is not implemented"))
}

func (UnimplementedNetworkServiceHandler) ConfirmSettlement(context.Context, *connect.Request[provider.ConfirmSettlementRequest]) (*connect.Response[provider.ConfirmSettlementResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tzero.v1.payment_intent.provider.NetworkService.ConfirmSettlement is not implemented"))
}

// ProviderServiceClient is a client for the tzero.v1.payment_intent.provider.ProviderService
// service.
type ProviderServiceClient interface {
	// *
	// Network instructs provider to create payment details for the payment intent. Provide should return
	// a list of supported payment method along with URL where payer should be redirected.
	CreatePaymentIntent(context.Context, *connect.Request[provider.CreatePaymentIntentRequest]) (*connect.Response[provider.CreatePaymentIntentResponse], error)
	// *
	// Network notifies provider about successful payout for the corresponding payment intent
	ConfirmPayout(context.Context, *connect.Request[provider.ConfirmPayoutRequest]) (*connect.Response[provider.ConfirmPayoutResponse], error)
}

// NewProviderServiceClient constructs a client for the
// tzero.v1.payment_intent.provider.ProviderService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProviderServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProviderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	providerServiceMethods := provider.File_payment_intent_provider_provider_proto.Services().ByName("ProviderService").Methods()
	return &providerServiceClient{
		createPaymentIntent: connect.NewClient[provider.CreatePaymentIntentRequest, provider.CreatePaymentIntentResponse](
			httpClient,
			baseURL+ProviderServiceCreatePaymentIntentProcedure,
			connect.WithSchema(providerServiceMethods.ByName("CreatePaymentIntent")),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		confirmPayout: connect.NewClient[provider.ConfirmPayoutRequest, provider.ConfirmPayoutResponse](
			httpClient,
			baseURL+ProviderServiceConfirmPayoutProcedure,
			connect.WithSchema(providerServiceMethods.ByName("ConfirmPayout")),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
	}
}

// providerServiceClient implements ProviderServiceClient.
type providerServiceClient struct {
	createPaymentIntent *connect.Client[provider.CreatePaymentIntentRequest, provider.CreatePaymentIntentResponse]
	confirmPayout       *connect.Client[provider.ConfirmPayoutRequest, provider.ConfirmPayoutResponse]
}

// CreatePaymentIntent calls tzero.v1.payment_intent.provider.ProviderService.CreatePaymentIntent.
func (c *providerServiceClient) CreatePaymentIntent(ctx context.Context, req *connect.Request[provider.CreatePaymentIntentRequest]) (*connect.Response[provider.CreatePaymentIntentResponse], error) {
	return c.createPaymentIntent.CallUnary(ctx, req)
}

// ConfirmPayout calls tzero.v1.payment_intent.provider.ProviderService.ConfirmPayout.
func (c *providerServiceClient) ConfirmPayout(ctx context.Context, req *connect.Request[provider.ConfirmPayoutRequest]) (*connect.Response[provider.ConfirmPayoutResponse], error) {
	return c.confirmPayout.CallUnary(ctx, req)
}

// ProviderServiceHandler is an implementation of the
// tzero.v1.payment_intent.provider.ProviderService service.
type ProviderServiceHandler interface {
	// *
	// Network instructs provider to create payment details for the payment intent. Provide should return
	// a list of supported payment method along with URL where payer should be redirected.
	CreatePaymentIntent(context.Context, *connect.Request[provider.CreatePaymentIntentRequest]) (*connect.Response[provider.CreatePaymentIntentResponse], error)
	// *
	// Network notifies provider about successful payout for the corresponding payment intent
	ConfirmPayout(context.Context, *connect.Request[provider.ConfirmPayoutRequest]) (*connect.Response[provider.ConfirmPayoutResponse], error)
}

// NewProviderServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProviderServiceHandler(svc ProviderServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	providerServiceMethods := provider.File_payment_intent_provider_provider_proto.Services().ByName("ProviderService").Methods()
	providerServiceCreatePaymentIntentHandler := connect.NewUnaryHandler(
		ProviderServiceCreatePaymentIntentProcedure,
		svc.CreatePaymentIntent,
		connect.WithSchema(providerServiceMethods.ByName("CreatePaymentIntent")),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	providerServiceConfirmPayoutHandler := connect.NewUnaryHandler(
		ProviderServiceConfirmPayoutProcedure,
		svc.ConfirmPayout,
		connect.WithSchema(providerServiceMethods.ByName("ConfirmPayout")),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	return "/tzero.v1.payment_intent.provider.ProviderService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProviderServiceCreatePaymentIntentProcedure:
			providerServiceCreatePaymentIntentHandler.ServeHTTP(w, r)
		case ProviderServiceConfirmPayoutProcedure:
			providerServiceConfirmPayoutHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProviderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProviderServiceHandler struct{}

func (UnimplementedProviderServiceHandler) CreatePaymentIntent(context.Context, *connect.Request[provider.CreatePaymentIntentRequest]) (*connect.Response[provider.CreatePaymentIntentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tzero.v1.payment_intent.provider.ProviderService.CreatePaymentIntent is not implemented"))
}

func (UnimplementedProviderServiceHandler) ConfirmPayout(context.Context, *connect.Request[provider.ConfirmPayoutRequest]) (*connect.Response[provider.ConfirmPayoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tzero.v1.payment_intent.provider.ProviderService.ConfirmPayout is not implemented"))
}
