// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tzero/v1/payment/provider.proto

package paymentconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	payment "github.com/t-0-network/provider-sdk-go/api/tzero/v1/payment"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProviderServiceName is the fully-qualified name of the ProviderService service.
	ProviderServiceName = "tzero.v1.payment.ProviderService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProviderServicePayOutProcedure is the fully-qualified name of the ProviderService's PayOut RPC.
	ProviderServicePayOutProcedure = "/tzero.v1.payment.ProviderService/PayOut"
	// ProviderServiceUpdatePaymentProcedure is the fully-qualified name of the ProviderService's
	// UpdatePayment RPC.
	ProviderServiceUpdatePaymentProcedure = "/tzero.v1.payment.ProviderService/UpdatePayment"
	// ProviderServiceUpdateLimitProcedure is the fully-qualified name of the ProviderService's
	// UpdateLimit RPC.
	ProviderServiceUpdateLimitProcedure = "/tzero.v1.payment.ProviderService/UpdateLimit"
	// ProviderServiceAppendLedgerEntriesProcedure is the fully-qualified name of the ProviderService's
	// AppendLedgerEntries RPC.
	ProviderServiceAppendLedgerEntriesProcedure = "/tzero.v1.payment.ProviderService/AppendLedgerEntries"
)

// ProviderServiceClient is a client for the tzero.v1.payment.ProviderService service.
type ProviderServiceClient interface {
	// *
	// Network instructs the provider to execute a payout to the recipient.
	// This method should be idempotent, meaning that multiple calls with the same parameters will have no additional effect.
	PayOut(context.Context, *connect.Request[payment.PayoutRequest]) (*connect.Response[payment.PayoutResponse], error)
	// *
	// Network provides an update on the status of a payment. This can be either a success or a failure.
	// This method should be idempotent, meaning that multiple calls with the same parameters will have no additional effect.
	UpdatePayment(context.Context, *connect.Request[payment.UpdatePaymentRequest]) (*connect.Response[payment.UpdatePaymentResponse], error)
	// *
	// This rpc is used to notify the provider about the changes in credit limit and/or credit usage.
	UpdateLimit(context.Context, *connect.Request[payment.UpdateLimitRequest]) (*connect.Response[payment.UpdateLimitResponse], error)
	// *
	// Network can send all the updates about ledger entries of the provider's accounts. It can be used to
	// keep track of the provider's exposure to other participants and other important financial events. (see the list in the message below)
	AppendLedgerEntries(context.Context, *connect.Request[payment.AppendLedgerEntriesRequest]) (*connect.Response[payment.AppendLedgerEntriesResponse], error)
}

// NewProviderServiceClient constructs a client for the tzero.v1.payment.ProviderService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProviderServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProviderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	providerServiceMethods := payment.File_tzero_v1_payment_provider_proto.Services().ByName("ProviderService").Methods()
	return &providerServiceClient{
		payOut: connect.NewClient[payment.PayoutRequest, payment.PayoutResponse](
			httpClient,
			baseURL+ProviderServicePayOutProcedure,
			connect.WithSchema(providerServiceMethods.ByName("PayOut")),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		updatePayment: connect.NewClient[payment.UpdatePaymentRequest, payment.UpdatePaymentResponse](
			httpClient,
			baseURL+ProviderServiceUpdatePaymentProcedure,
			connect.WithSchema(providerServiceMethods.ByName("UpdatePayment")),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		updateLimit: connect.NewClient[payment.UpdateLimitRequest, payment.UpdateLimitResponse](
			httpClient,
			baseURL+ProviderServiceUpdateLimitProcedure,
			connect.WithSchema(providerServiceMethods.ByName("UpdateLimit")),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		appendLedgerEntries: connect.NewClient[payment.AppendLedgerEntriesRequest, payment.AppendLedgerEntriesResponse](
			httpClient,
			baseURL+ProviderServiceAppendLedgerEntriesProcedure,
			connect.WithSchema(providerServiceMethods.ByName("AppendLedgerEntries")),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
	}
}

// providerServiceClient implements ProviderServiceClient.
type providerServiceClient struct {
	payOut              *connect.Client[payment.PayoutRequest, payment.PayoutResponse]
	updatePayment       *connect.Client[payment.UpdatePaymentRequest, payment.UpdatePaymentResponse]
	updateLimit         *connect.Client[payment.UpdateLimitRequest, payment.UpdateLimitResponse]
	appendLedgerEntries *connect.Client[payment.AppendLedgerEntriesRequest, payment.AppendLedgerEntriesResponse]
}

// PayOut calls tzero.v1.payment.ProviderService.PayOut.
func (c *providerServiceClient) PayOut(ctx context.Context, req *connect.Request[payment.PayoutRequest]) (*connect.Response[payment.PayoutResponse], error) {
	return c.payOut.CallUnary(ctx, req)
}

// UpdatePayment calls tzero.v1.payment.ProviderService.UpdatePayment.
func (c *providerServiceClient) UpdatePayment(ctx context.Context, req *connect.Request[payment.UpdatePaymentRequest]) (*connect.Response[payment.UpdatePaymentResponse], error) {
	return c.updatePayment.CallUnary(ctx, req)
}

// UpdateLimit calls tzero.v1.payment.ProviderService.UpdateLimit.
func (c *providerServiceClient) UpdateLimit(ctx context.Context, req *connect.Request[payment.UpdateLimitRequest]) (*connect.Response[payment.UpdateLimitResponse], error) {
	return c.updateLimit.CallUnary(ctx, req)
}

// AppendLedgerEntries calls tzero.v1.payment.ProviderService.AppendLedgerEntries.
func (c *providerServiceClient) AppendLedgerEntries(ctx context.Context, req *connect.Request[payment.AppendLedgerEntriesRequest]) (*connect.Response[payment.AppendLedgerEntriesResponse], error) {
	return c.appendLedgerEntries.CallUnary(ctx, req)
}

// ProviderServiceHandler is an implementation of the tzero.v1.payment.ProviderService service.
type ProviderServiceHandler interface {
	// *
	// Network instructs the provider to execute a payout to the recipient.
	// This method should be idempotent, meaning that multiple calls with the same parameters will have no additional effect.
	PayOut(context.Context, *connect.Request[payment.PayoutRequest]) (*connect.Response[payment.PayoutResponse], error)
	// *
	// Network provides an update on the status of a payment. This can be either a success or a failure.
	// This method should be idempotent, meaning that multiple calls with the same parameters will have no additional effect.
	UpdatePayment(context.Context, *connect.Request[payment.UpdatePaymentRequest]) (*connect.Response[payment.UpdatePaymentResponse], error)
	// *
	// This rpc is used to notify the provider about the changes in credit limit and/or credit usage.
	UpdateLimit(context.Context, *connect.Request[payment.UpdateLimitRequest]) (*connect.Response[payment.UpdateLimitResponse], error)
	// *
	// Network can send all the updates about ledger entries of the provider's accounts. It can be used to
	// keep track of the provider's exposure to other participants and other important financial events. (see the list in the message below)
	AppendLedgerEntries(context.Context, *connect.Request[payment.AppendLedgerEntriesRequest]) (*connect.Response[payment.AppendLedgerEntriesResponse], error)
}

// NewProviderServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProviderServiceHandler(svc ProviderServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	providerServiceMethods := payment.File_tzero_v1_payment_provider_proto.Services().ByName("ProviderService").Methods()
	providerServicePayOutHandler := connect.NewUnaryHandler(
		ProviderServicePayOutProcedure,
		svc.PayOut,
		connect.WithSchema(providerServiceMethods.ByName("PayOut")),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	providerServiceUpdatePaymentHandler := connect.NewUnaryHandler(
		ProviderServiceUpdatePaymentProcedure,
		svc.UpdatePayment,
		connect.WithSchema(providerServiceMethods.ByName("UpdatePayment")),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	providerServiceUpdateLimitHandler := connect.NewUnaryHandler(
		ProviderServiceUpdateLimitProcedure,
		svc.UpdateLimit,
		connect.WithSchema(providerServiceMethods.ByName("UpdateLimit")),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	providerServiceAppendLedgerEntriesHandler := connect.NewUnaryHandler(
		ProviderServiceAppendLedgerEntriesProcedure,
		svc.AppendLedgerEntries,
		connect.WithSchema(providerServiceMethods.ByName("AppendLedgerEntries")),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	return "/tzero.v1.payment.ProviderService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProviderServicePayOutProcedure:
			providerServicePayOutHandler.ServeHTTP(w, r)
		case ProviderServiceUpdatePaymentProcedure:
			providerServiceUpdatePaymentHandler.ServeHTTP(w, r)
		case ProviderServiceUpdateLimitProcedure:
			providerServiceUpdateLimitHandler.ServeHTTP(w, r)
		case ProviderServiceAppendLedgerEntriesProcedure:
			providerServiceAppendLedgerEntriesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProviderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProviderServiceHandler struct{}

func (UnimplementedProviderServiceHandler) PayOut(context.Context, *connect.Request[payment.PayoutRequest]) (*connect.Response[payment.PayoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tzero.v1.payment.ProviderService.PayOut is not implemented"))
}

func (UnimplementedProviderServiceHandler) UpdatePayment(context.Context, *connect.Request[payment.UpdatePaymentRequest]) (*connect.Response[payment.UpdatePaymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tzero.v1.payment.ProviderService.UpdatePayment is not implemented"))
}

func (UnimplementedProviderServiceHandler) UpdateLimit(context.Context, *connect.Request[payment.UpdateLimitRequest]) (*connect.Response[payment.UpdateLimitResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tzero.v1.payment.ProviderService.UpdateLimit is not implemented"))
}

func (UnimplementedProviderServiceHandler) AppendLedgerEntries(context.Context, *connect.Request[payment.AppendLedgerEntriesRequest]) (*connect.Response[payment.AppendLedgerEntriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tzero.v1.payment.ProviderService.AppendLedgerEntries is not implemented"))
}
