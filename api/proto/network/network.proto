syntax = "proto3";

package tzero.v1.network;

import "common/common.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

// this service is available to the members of the network and requires Public Key header
// all requests must be signed with Private Key
service NetworkService {
  rpc UpdateQuote(UpdateQuoteRequest) returns (UpdateQuoteResponse)  {
    option idempotency_level = IDEMPOTENT;
  };

  // get best quote among available matching parameters and limits
  rpc GetPayoutQuote(GetPayoutQuoteRequest) returns (GetPayoutQuoteResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  };

  // network will try to find a provider matching request parameters and limits/credit usage
  rpc CreatePayment(CreatePaymentRequest) returns (CreatePaymentResponse) {
    option idempotency_level = IDEMPOTENT;
  };

  // called when provider made a payout to user
  rpc UpdatePayout(UpdatePayoutRequest) returns (UpdatePayoutResponse)  {
    option idempotency_level = IDEMPOTENT;
  };

  // called when provider received payment from user
  rpc CreatePayIn(CreatePayInRequest) returns (CreatePayInResponse)  {
    option idempotency_level = IDEMPOTENT;
  };

  rpc GetKycData(GetKycDataRequest) returns (GetKycDataResponse)  {
    option idempotency_level = IDEMPOTENT;
  };
}

// Base currency is always USD
message UpdateQuoteRequest {
  repeated Quote pay_out = 10;
  repeated Quote pay_in = 20;

  message Quote {
    string currency = 10; // BRL, EUR ...
    QuoteType quote_type = 20;
    repeated Band bands = 30; // list of bands for this quote
    google.protobuf.Timestamp expiration = 60; // expiration time of the quote
    google.protobuf.Timestamp timestamp = 70; // timestamp quote was created

    message Band {
      string client_quote_id = 10; // unique client generated id for this band
      tzero.v1.common.Decimal max_amount = 40; // max amount of USD this quote is applicable for. Please look into documentation for valid amounts.
      tzero.v1.common.Decimal rate = 50; // USD/currency rate!
    }
  }
}

message UpdateQuoteResponse {}

message GetPayoutQuoteRequest {
  string payout_currency = 10;
  tzero.v1.common.Decimal amount = 20; // amount in quote currency, only USD is supported
  QuoteType quote_type = 30;
}

message GetPayoutQuoteResponse {
  tzero.v1.common.Decimal rate = 10;
  google.protobuf.Timestamp expiration = 20;
  QuoteId quote_id = 30;
}

message CreatePaymentRequest{
  string payment_client_id = 10; // unique client generated id for this payment

  string payout_currency = 20;
  tzero.v1.common.Decimal amount = 30; // amount in the payin currency, by default USD (if not specified)
  optional string payin_currency = 40; // if not specified, USD is used

  Sender sender = 50;
  Recipient recipient = 60;
  // TODO: add PaymentMethod
  optional QuoteId quote_id = 100;

  message Sender {
    oneof sender {
      PrivatePerson private_person = 10;
    }
  }

  message Recipient {
    oneof recipient {
      PrivatePerson private_person = 10;
    }
  }

  message PrivatePerson {
    string private_person_client_id = 10;
    string first_name = 20;
    string last_name = 30;
    // PaymentMethod details
    // ...
  }
}

message QuoteId {
  string quote_id = 30;
  int32 provider_id = 40;
}

message CreatePaymentResponse {
  string payment_client_id = 10; // client generated id supplied in the request

  oneof result {
    Success success = 20;
    Failure failure = 30;
  }

  message Success {
    int64 payment_id = 10; // payment id assigned by the network
  }

  message Failure {
    enum Reason {
      REASON_UNSPECIFIED = 0; // TODO: ensure CREATE_PAYMENT_RESPONSE_FAILURE_ prefix?

    }
  }
}

message UpdatePayoutRequest{
  int64 payment_id = 10;
  int64 payout_id = 20;

  oneof result {
    Success success = 30;
    Failure failure = 40;
  }

  message Success {

  }

  message Failure {

  }
}

message UpdatePayoutResponse{}

message GetKycDataRequest {
  oneof account {
    string person_id = 10;
  }
}
message GetKycDataResponse {
  oneof kyc_data {
    string sumsub_kyc_token = 10;
  }
}

message CreatePayInRequest {
  string payment_id = 10;
  tzero.v1.common.Decimal amount = 20;
}

message CreatePayInResponse {}

enum QuoteType {
  QUOTE_TYPE_UNSPECIFIED = 0;
  QUOTE_TYPE_REALTIME = 1; // real-time quote must be valid at least for 30 seconds (TBD)
  //QUOTE_TYPE_GUARANTEED = 2; // real-time quote must be valid at least for N minutes (TBD)
}